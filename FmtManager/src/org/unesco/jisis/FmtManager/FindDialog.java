/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.unesco.jisis.FmtManager;

import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import javax.swing.ButtonModel;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.JTextComponent;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 * @author jcd
 */
public class FindDialog extends javax.swing.JDialog {

   protected JTextComponent textComponent_;
   protected boolean m_searchUp = false;
   protected int m_searchIndex = -1;
   protected String m_searchData;
   protected Document m_docFind;
   protected Document m_docReplace;
   protected ButtonModel m_modelWord;
   protected ButtonModel m_modelCase;
   protected ButtonModel m_modelUp;
   protected ButtonModel m_modelDown;
  
   FmtManagerTopComponent m_owner;

   /**
    * Creates new form FindDialog
    */
   public FindDialog(java.awt.Frame parent, boolean modal) {
      super(parent, modal);
      initComponents();
      m_docFind = txtToFind.getDocument();
      m_docReplace = txtReplaceWith.getDocument();
      m_modelWord = chkWholeWordsOnly.getModel();
      m_modelCase = chkMatchCase.getModel();
      m_modelUp = rbSearchUp.getModel();
      m_modelDown = rdSearchDown.getModel();

   }

    public FindDialog(FmtManagerTopComponent owner, java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        m_owner = owner;
        textComponent_ = owner.getTextPane();
        m_docFind = txtToFind.getDocument();
        m_docReplace = txtReplaceWith.getDocument();
        m_modelWord = chkWholeWordsOnly.getModel();
        m_modelCase = chkMatchCase.getModel();
        m_modelUp = rbSearchUp.getModel();
        m_modelDown = rdSearchDown.getModel();

        txtRplToFind.setDocument(m_docFind);
        chkRplWholeWordsOnly.setModel(m_modelUp);
        chkRplMatchCase.setModel(m_modelCase);
        rbRplSearchUp.setModel(m_modelUp);
        rbRplSearchDown.setModel(m_modelDown);
        WindowListener flst = new WindowAdapter() {
            @Override
            public void windowActivated(WindowEvent e) {
                m_searchIndex = -1;
            }
            @Override
            public void windowDeactivated(WindowEvent e) {
                m_searchData = null;
            }
        };
        addWindowListener(flst);
    }

    public void setSelectedIndex(int index) {
        tabbedPane.setSelectedIndex(index);
        setVisible(true);

        m_searchIndex = -1;
    }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupUpDown = new javax.swing.ButtonGroup();
        btnGroupRplUpDown = new javax.swing.ButtonGroup();
        tabbedPane = new javax.swing.JTabbedPane();
        findTabPanel = new javax.swing.JPanel();
        ctrlPanel = new javax.swing.JPanel();
        lblFindWhat = new javax.swing.JLabel();
        txtToFind = new javax.swing.JTextField();
        btnFindNext = new javax.swing.JButton();
        optionsPanel = new javax.swing.JPanel();
        chkWholeWordsOnly = new javax.swing.JCheckBox();
        chkMatchCase = new javax.swing.JCheckBox();
        rbSearchUp = new javax.swing.JRadioButton();
        rdSearchDown = new javax.swing.JRadioButton();
        btnClose = new javax.swing.JButton();
        replaceTabPanel = new javax.swing.JPanel();
        rplCtrlPanel = new javax.swing.JPanel();
        optionsRplPanel = new javax.swing.JPanel();
        chkRplWholeWordsOnly = new javax.swing.JCheckBox();
        chkRplMatchCase = new javax.swing.JCheckBox();
        rbRplSearchUp = new javax.swing.JRadioButton();
        rbRplSearchDown = new javax.swing.JRadioButton();
        lblRplFindWhat = new javax.swing.JLabel();
        txtRplToFind = new javax.swing.JTextField();
        btnReplace = new javax.swing.JButton();
        lblReplaceWith = new javax.swing.JLabel();
        txtReplaceWith = new javax.swing.JTextField();
        btnReplaceAll = new javax.swing.JButton();
        btnRplClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.title")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblFindWhat, org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.lblFindWhat.text")); // NOI18N

        txtToFind.setText(org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.txtToFind.text")); // NOI18N

        btnFindNext.setMnemonic('f');
        org.openide.awt.Mnemonics.setLocalizedText(btnFindNext, org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.btnFindNext.text")); // NOI18N
        btnFindNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ctrlPanelLayout = new javax.swing.GroupLayout(ctrlPanel);
        ctrlPanel.setLayout(ctrlPanelLayout);
        ctrlPanelLayout.setHorizontalGroup(
            ctrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ctrlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFindWhat, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtToFind, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnFindNext)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        ctrlPanelLayout.setVerticalGroup(
            ctrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ctrlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ctrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ctrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtToFind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnFindNext))
                    .addComponent(lblFindWhat))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        optionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.optionsPanel.border.title"))); // NOI18N

        chkWholeWordsOnly.setMnemonic('w');
        chkWholeWordsOnly.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(chkWholeWordsOnly, org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.chkWholeWordsOnly.text")); // NOI18N

        chkMatchCase.setMnemonic('c');
        org.openide.awt.Mnemonics.setLocalizedText(chkMatchCase, org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.chkMatchCase.text")); // NOI18N

        btnGroupUpDown.add(rbSearchUp);
        rbSearchUp.setMnemonic('u');
        org.openide.awt.Mnemonics.setLocalizedText(rbSearchUp, org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.rbSearchUp.text")); // NOI18N

        btnGroupUpDown.add(rdSearchDown);
        rdSearchDown.setMnemonic('d');
        rdSearchDown.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(rdSearchDown, org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.rdSearchDown.text")); // NOI18N

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkWholeWordsOnly)
                    .addComponent(chkMatchCase))
                .addGap(74, 74, 74)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdSearchDown)
                    .addComponent(rbSearchUp))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkWholeWordsOnly)
                    .addComponent(rbSearchUp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkMatchCase)
                    .addComponent(rdSearchDown))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(btnClose, org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.btnClose.text")); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout findTabPanelLayout = new javax.swing.GroupLayout(findTabPanel);
        findTabPanel.setLayout(findTabPanelLayout);
        findTabPanelLayout.setHorizontalGroup(
            findTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findTabPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(findTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ctrlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(findTabPanelLayout.createSequentialGroup()
                        .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        findTabPanelLayout.setVerticalGroup(
            findTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findTabPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ctrlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(findTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(findTabPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(findTabPanelLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(btnClose)))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.findTabPanel.TabConstraints.tabTitle"), findTabPanel); // NOI18N

        optionsRplPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.optionsRplPanel.border.title"))); // NOI18N

        chkRplWholeWordsOnly.setMnemonic('w');
        chkRplWholeWordsOnly.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(chkRplWholeWordsOnly, org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.chkRplWholeWordsOnly.text")); // NOI18N

        chkRplMatchCase.setMnemonic('c');
        org.openide.awt.Mnemonics.setLocalizedText(chkRplMatchCase, org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.chkRplMatchCase.text")); // NOI18N

        btnGroupRplUpDown.add(rbRplSearchUp);
        rbRplSearchUp.setMnemonic('u');
        org.openide.awt.Mnemonics.setLocalizedText(rbRplSearchUp, org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.rbRplSearchUp.text")); // NOI18N

        btnGroupRplUpDown.add(rbRplSearchDown);
        rbRplSearchDown.setMnemonic('d');
        rbRplSearchDown.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(rbRplSearchDown, org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.rbRplSearchDown.text")); // NOI18N

        javax.swing.GroupLayout optionsRplPanelLayout = new javax.swing.GroupLayout(optionsRplPanel);
        optionsRplPanel.setLayout(optionsRplPanelLayout);
        optionsRplPanelLayout.setHorizontalGroup(
            optionsRplPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsRplPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(optionsRplPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkRplWholeWordsOnly)
                    .addComponent(chkRplMatchCase))
                .addGap(26, 26, 26)
                .addGroup(optionsRplPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbRplSearchDown)
                    .addComponent(rbRplSearchUp))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        optionsRplPanelLayout.setVerticalGroup(
            optionsRplPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsRplPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(optionsRplPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkRplWholeWordsOnly)
                    .addComponent(rbRplSearchUp))
                .addGap(7, 7, 7)
                .addGroup(optionsRplPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbRplSearchDown)
                    .addComponent(chkRplMatchCase)))
        );

        org.openide.awt.Mnemonics.setLocalizedText(lblRplFindWhat, org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.lblRplFindWhat.text")); // NOI18N

        txtRplToFind.setText(org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.txtRplToFind.text")); // NOI18N

        btnReplace.setMnemonic('r');
        org.openide.awt.Mnemonics.setLocalizedText(btnReplace, org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.btnReplace.text")); // NOI18N
        btnReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReplaceActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lblReplaceWith, org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.lblReplaceWith.text")); // NOI18N

        txtReplaceWith.setText(org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.txtReplaceWith.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnReplaceAll, org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.btnReplaceAll.text")); // NOI18N
        btnReplaceAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReplaceAllActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnRplClose, org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.btnRplClose.text")); // NOI18N
        btnRplClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRplCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rplCtrlPanelLayout = new javax.swing.GroupLayout(rplCtrlPanel);
        rplCtrlPanel.setLayout(rplCtrlPanelLayout);
        rplCtrlPanelLayout.setHorizontalGroup(
            rplCtrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rplCtrlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rplCtrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, rplCtrlPanelLayout.createSequentialGroup()
                        .addComponent(lblReplaceWith)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtReplaceWith))
                    .addGroup(rplCtrlPanelLayout.createSequentialGroup()
                        .addComponent(lblRplFindWhat, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRplToFind, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(optionsRplPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22)
                .addGroup(rplCtrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rplCtrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnReplaceAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReplace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnRplClose, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        rplCtrlPanelLayout.setVerticalGroup(
            rplCtrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rplCtrlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rplCtrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnReplace)
                    .addGroup(rplCtrlPanelLayout.createSequentialGroup()
                        .addGroup(rplCtrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblRplFindWhat)
                            .addComponent(txtRplToFind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(rplCtrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblReplaceWith)
                            .addGroup(rplCtrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtReplaceWith, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnReplaceAll)))))
                .addGroup(rplCtrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rplCtrlPanelLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(btnRplClose)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rplCtrlPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(optionsRplPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(223, 223, 223))))
        );

        javax.swing.GroupLayout replaceTabPanelLayout = new javax.swing.GroupLayout(replaceTabPanel);
        replaceTabPanel.setLayout(replaceTabPanelLayout);
        replaceTabPanelLayout.setHorizontalGroup(
            replaceTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rplCtrlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        replaceTabPanelLayout.setVerticalGroup(
            replaceTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rplCtrlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(FindDialog.class, "FindDialog.replaceTabPanel.TabConstraints.tabTitle"), replaceTabPanel); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   private void btnFindNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindNextActionPerformed
       findNext(false,true);
   }//GEN-LAST:event_btnFindNextActionPerformed

   private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
      setVisible(false);
   }//GEN-LAST:event_btnCloseActionPerformed

   private void btnReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReplaceActionPerformed
      findNext(true, true);
   }//GEN-LAST:event_btnReplaceActionPerformed

   private void btnRplCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRplCloseActionPerformed
      setVisible(false);
   }//GEN-LAST:event_btnRplCloseActionPerformed

   private void btnReplaceAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReplaceAllActionPerformed
      
      int counter = 0;
      while (true) {

         int result = findNext(true, false);
         if (result < 0) {
            return;
         } else if (result == 0) {
            break;
         }
         counter++;
      }
      JOptionPane.showMessageDialog(m_owner,
              counter + " replacement(s) have been done",
              m_owner.getDisplayName(),
              JOptionPane.INFORMATION_MESSAGE);
   
   }//GEN-LAST:event_btnReplaceAllActionPerformed

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(FindDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(FindDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(FindDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(FindDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>

      /* Create and display the dialog */
      java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
            FindDialog dialog = new FindDialog(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
               @Override
               public void windowClosing(java.awt.event.WindowEvent e) {
                  System.exit(0);
               }
            });
            dialog.setVisible(true);
         }
      });
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnFindNext;
    private javax.swing.ButtonGroup btnGroupRplUpDown;
    private javax.swing.ButtonGroup btnGroupUpDown;
    private javax.swing.JButton btnReplace;
    private javax.swing.JButton btnReplaceAll;
    private javax.swing.JButton btnRplClose;
    private javax.swing.JCheckBox chkMatchCase;
    private javax.swing.JCheckBox chkRplMatchCase;
    private javax.swing.JCheckBox chkRplWholeWordsOnly;
    private javax.swing.JCheckBox chkWholeWordsOnly;
    private javax.swing.JPanel ctrlPanel;
    private javax.swing.JPanel findTabPanel;
    private javax.swing.JLabel lblFindWhat;
    private javax.swing.JLabel lblReplaceWith;
    private javax.swing.JLabel lblRplFindWhat;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JPanel optionsRplPanel;
    private javax.swing.JRadioButton rbRplSearchDown;
    private javax.swing.JRadioButton rbRplSearchUp;
    private javax.swing.JRadioButton rbSearchUp;
    private javax.swing.JRadioButton rdSearchDown;
    private javax.swing.JPanel replaceTabPanel;
    private javax.swing.JPanel rplCtrlPanel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTextField txtReplaceWith;
    private javax.swing.JTextField txtRplToFind;
    private javax.swing.JTextField txtToFind;
    // End of variables declaration//GEN-END:variables

   public int findNext(boolean doReplace, boolean showWarnings) {

      int pos = textComponent_.getCaretPosition();
      if (rbSearchUp.isSelected() != m_searchUp) {
         m_searchUp = rbSearchUp.isSelected();
         m_searchIndex = -1;
      }

      if (m_searchIndex == -1) {
         try {
            Document doc = textComponent_.getDocument();
            if (m_searchUp) {
               m_searchData = doc.getText(0, pos);
            } else {
               m_searchData = doc.getText(pos, doc.getLength() - pos);
            }
            m_searchIndex = pos;
         } catch (BadLocationException ex) {
             
            NotifyDescriptor d =
                    new NotifyDescriptor.Confirmation(ex.getMessage(),
                    NotifyDescriptor.DEFAULT_OPTION, NotifyDescriptor.ERROR_MESSAGE);
            DialogDisplayer.getDefault().notify(d);
           
            return -1;
         }
      }


      String key = "";
      try {
         key = m_docFind.getText(0, m_docFind.getLength());
      } catch (BadLocationException ex) {
      }
      if (key.length() == 0) {
        
         String msg  = NbBundle.getMessage(FindDialog.class,
                    "FindDialog.MSG_PleaseEnterTheTargetToSearch");
         NotifyDescriptor d =
                    new NotifyDescriptor.Confirmation(msg,
                    NotifyDescriptor.DEFAULT_OPTION, NotifyDescriptor.ERROR_MESSAGE);
            DialogDisplayer.getDefault().notify(d);
         return -1;
      }
      if (!m_modelCase.isSelected()) {
         m_searchData = m_searchData.toLowerCase();
         key = key.toLowerCase();
      }
      if (m_modelWord.isSelected()) {
         for (int k = 0; k < Utils.WORD_SEPARATORS.length; k++) {
            if (key.indexOf(Utils.WORD_SEPARATORS[k]) >= 0) {
               String msg = "The text target contains an illegal "
                       + "character \'" + Utils.WORD_SEPARATORS[k] + "\'";
               NotifyDescriptor d =
                       new NotifyDescriptor.Confirmation(msg,
                       NotifyDescriptor.DEFAULT_OPTION, NotifyDescriptor.ERROR_MESSAGE);
               DialogDisplayer.getDefault().notify(d);
               return -1;
            }
         }
      }

      String replacement = "";
      if (doReplace) {
         try {
            replacement = m_docReplace.getText(0,
                    m_docReplace.getLength());
         } catch (BadLocationException ex) {
         }
      }

      int xStart = -1;
      int xFinish = -1;
      while (true) {
         if (m_searchUp) {
            xStart = m_searchData.lastIndexOf(key, pos - 1);
         } else {
            xStart = m_searchData.indexOf(key, pos - m_searchIndex);
         }
         if (xStart < 0) {
            if (showWarnings) {
                String msg  = NbBundle.getMessage(FindDialog.class,
                    "FindDialog.MSG_TextNotFound");
              
               NotifyDescriptor d =
                       new NotifyDescriptor.Confirmation(msg,
                       NotifyDescriptor.DEFAULT_OPTION, NotifyDescriptor.ERROR_MESSAGE);
               DialogDisplayer.getDefault().notify(d);
            }
            return 0;
         }

         xFinish = xStart + key.length();

         if (m_modelWord.isSelected()) {
            boolean s1 = xStart > 0;
            boolean b1 = s1 && !Utils.isSeparator(m_searchData.charAt(
                    xStart - 1));
            boolean s2 = xFinish < m_searchData.length();
            boolean b2 = s2 && !Utils.isSeparator(m_searchData.charAt(
                    xFinish));

            if (b1 || b2) // Not a whole word
            {
               if (m_searchUp && s1) // Can continue up
               {
                  pos = xStart;
                  continue;
               }
               if (!m_searchUp && s2) // Can continue down
               {
                  pos = xFinish + 1;
                  continue;
               }
               // Found, but not a whole word, and we cannot continue
               if (showWarnings) {
                    String msg  = NbBundle.getMessage(FindDialog.class,
                    "FindDialog.MSG_TextNotFound");
                  NotifyDescriptor d =
                          new NotifyDescriptor.Confirmation(msg,
                          NotifyDescriptor.DEFAULT_OPTION, NotifyDescriptor.ERROR_MESSAGE);
                  DialogDisplayer.getDefault().notify(d);
               }
               return 0;
            }
         }
         break;
      }

      if (!m_searchUp) {
         xStart += m_searchIndex;
         xFinish += m_searchIndex;
      }
      if (doReplace) {
         m_owner.setSelection(xStart, xFinish, m_searchUp);
        
         

         textComponent_.replaceSelection(replacement);
         m_owner.setSelection(xStart, xStart + replacement.length(),
                 m_searchUp);
         m_searchIndex = -1;
      } else {
         m_owner.setSelection(xStart, xFinish, m_searchUp);
      }
      return 1;
}

// An instance of the private subclass of the default highlight painter
    Highlighter.HighlightPainter myHighlighter = new MyHighlightPainter(Color.LIGHT_GRAY);

// A class of the default highlight painter
    private class MyHighlightPainter extends DefaultHighlighter.DefaultHighlightPainter {

        public MyHighlightPainter(Color color) {

            super(color);

        }
    }
  
}
