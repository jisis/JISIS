
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 07 17:52:39 CEST 2007
//----------------------------------------------------

package org.unesco.jisis.core.searchengine;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 07 17:52:39 CEST 2007
  */
public class SearchParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SearchParser() {super();}

  /** Constructor which sets the default scanner. */
  public SearchParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SearchParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\003" +
    "\000\002\004\005\000\002\004\003\000\002\005\004\000" +
    "\002\005\003\000\002\011\005\000\002\011\003\000\002" +
    "\012\005\000\002\012\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\006\003\000\002\013\003" +
    "\000\002\014\005\000\002\020\006\000\002\017\005\000" +
    "\002\017\003\000\002\016\004\000\002\016\003\000\002" +
    "\015\004\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\010\007\017\014\015\017\005\001\002\000" +
    "\014\002\uffff\004\uffff\005\024\006\025\010\uffff\001\002" +
    "\000\026\002\uffef\004\uffef\005\uffef\006\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\016\uffef\001\002\000\026" +
    "\002\ufff1\004\ufff1\005\ufff1\006\ufff1\010\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\016\ufff1\001\002\000\020\002\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\010\ufff8\011\045\016\046\001" +
    "\002\000\006\002\044\004\022\001\002\000\014\002\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\010\ufffa\001\002\000\022\002" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\010\ufff6\011\ufff6\012\042" +
    "\016\ufff6\001\002\000\026\002\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\013\034\014\032\016\ufff4" +
    "\001\002\000\026\002\ufff0\004\ufff0\005\ufff0\006\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0\001\002" +
    "\000\004\017\030\001\002\000\014\002\ufffc\004\ufffc\005" +
    "\ufffc\006\ufffc\010\ufffc\001\002\000\010\007\017\014\015" +
    "\017\005\001\002\000\006\004\022\010\021\001\002\000" +
    "\014\002\ufffb\004\ufffb\005\ufffb\006\ufffb\010\ufffb\001\002" +
    "\000\010\007\017\014\015\017\005\001\002\000\014\002" +
    "\001\004\001\005\024\006\025\010\001\001\002\000\010" +
    "\007\017\014\015\017\005\001\002\000\010\007\017\014" +
    "\015\017\005\001\002\000\014\002\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\010\ufffd\001\002\000\014\002\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\010\ufffe\001\002\000\004\014\031\001\002" +
    "\000\026\002\uffee\004\uffee\005\uffee\006\uffee\010\uffee\011" +
    "\uffee\012\uffee\013\uffee\014\uffee\016\uffee\001\002\000\006" +
    "\014\uffe9\017\uffe9\001\002\000\006\014\040\017\005\001" +
    "\002\000\006\013\uffe7\017\uffe7\001\002\000\006\013\037" +
    "\017\005\001\002\000\026\002\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\016\ufff2" +
    "\001\002\000\006\013\uffe8\017\uffe8\001\002\000\006\014" +
    "\uffea\017\uffea\001\002\000\026\002\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\016" +
    "\ufff3\001\002\000\006\014\015\017\005\001\002\000\026" +
    "\002\ufff5\004\ufff5\005\ufff5\006\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\034\014\032\016\ufff5\001\002\000\004\002\000" +
    "\001\002\000\006\014\015\017\005\001\002\000\004\007" +
    "\050\001\002\000\014\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\010\ufff9\001\002\000\004\020\051\001\002\000\006\010" +
    "\uffeb\015\uffeb\001\002\000\006\010\054\015\053\001\002" +
    "\000\004\020\055\001\002\000\014\002\uffed\004\uffed\005" +
    "\uffed\006\uffed\010\uffed\001\002\000\006\010\uffec\015\uffec" +
    "\001\002\000\022\002\ufff7\004\ufff7\005\ufff7\006\ufff7\010" +
    "\ufff7\011\ufff7\012\042\016\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\024\002\007\003\003\004\015\005\010\006" +
    "\012\011\006\012\011\013\005\014\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\034\016\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\017" +
    "\003\003\004\015\005\010\006\012\011\006\012\011\013" +
    "\005\014\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\022\004\015\005\010\006\012\011\006\012" +
    "\011\013\005\014\013\001\001\000\002\001\001\000\020" +
    "\004\026\005\010\006\012\011\006\012\011\013\005\014" +
    "\013\001\001\000\020\004\025\005\010\006\012\011\006" +
    "\012\011\013\005\014\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\040\001\001\000\002\001\001\000" +
    "\004\013\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\042\013" +
    "\005\014\013\001\001\000\006\015\034\016\032\001\001" +
    "\000\002\001\001\000\012\006\012\012\055\013\005\014" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SearchParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SearchParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SearchParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
   
    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
           
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);   
            
            if (s.left >= 0) {                

                m.append(" in line "+(s.left));   
                
                if (s.right >= 0)                    
                    
                    m.append(", column "+(s.right));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SearchParser$actions {
  private final SearchParser parser;

  /** Constructor */
  CUP$SearchParser$actions(SearchParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SearchParser$do_action(
    int                        CUP$SearchParser$act_num,
    java_cup.runtime.lr_parser CUP$SearchParser$parser,
    java.util.Stack            CUP$SearchParser$stack,
    int                        CUP$SearchParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SearchParser$result;

      /* select the action based on the action number */
      switch (CUP$SearchParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dots ::= DOT 
            {
              Counter RESULT =null;
		 RESULT = new Counter(); 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("dots",11, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dots ::= dots DOT 
            {
              Counter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).right;
		Counter d = (Counter)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).value;
		 RESULT = d.add(); 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("dots",11, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // amps ::= AMP 
            {
              Counter RESULT =null;
		 RESULT = new Counter(); 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("amps",12, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // amps ::= amps AMP 
            {
              Counter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).right;
		Counter a = (Counter)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).value;
		
			RESULT = a.add(); 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("amps",12, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // field_list ::= NUMBER 
            {
              FieldList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
			RESULT = new FieldList(n);
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("field_list",13, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // field_list ::= field_list COMMA NUMBER 
            {
              FieldList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).right;
		FieldList d = (FieldList)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
			RESULT = d.add(n); 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("field_list",13, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op_q ::= SLASH LPAREN field_list RPAREN 
            {
              FieldList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).right;
		FieldList d = (FieldList)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).value;
			RESULT = d; 
                        System.out.println("here result :" + d.getEnum().nextElement().toString() );
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("op_q",14, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-3)), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // aterm ::= AMP TERM AMP 
            {
              AnyTerm RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).value;
			

                    RESULT = new AnyTerm(t); 
                
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("aterm",10, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term ::= TERM 
            {
              SearchTerm RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
		 

                        RESULT= new SearchTerm(t); 
                
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dot_amp ::= aterm 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		AnyTerm a = (AnyTerm)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
			RESULT = a; 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("dot_amp",4, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dot_amp ::= term 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		SearchTerm a = (SearchTerm)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
			RESULT = a; 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("dot_amp",4, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dot_amp ::= dot_amp dots term 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).right;
		Counter b = (Counter)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		SearchTerm c = (SearchTerm)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
			RESULT = new DotExpr(b.getCount(),a,c); 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("dot_amp",4, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dot_amp ::= dot_amp amps term 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).right;
		Counter b = (Counter)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		SearchTerm c = (SearchTerm)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
		 RESULT = new AmpExpr(b.getCount(),a,c); 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("dot_amp",4, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // f_op ::= dot_amp 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
			RESULT = a; 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("f_op",8, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // f_op ::= f_op F_OP dot_amp 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
			RESULT = new FExpr(a,b); 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("f_op",8, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // g_op ::= f_op 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("g_op",7, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // g_op ::= g_op G_OP f_op 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
		 RESULT = new GExpr(a,b); 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("g_op",7, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // f_def ::= g_op 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
			RESULT = new FdQual(a); 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("f_def",3, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // f_def ::= g_op op_q 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		FieldList b = (FieldList)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
			RESULT = new FdQual(a,b);
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("f_def",3, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // group ::= f_def 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
			RESULT = a; 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("group",2, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // group ::= LPAREN or RPAREN 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).value;
		 RESULT = a; 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("group",2, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // and_not ::= group 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
			RESULT = a; 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("and_not",1, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // and_not ::= and_not NOT group 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
			RESULT = new NotExpr(a,b); 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("and_not",1, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // and_not ::= and_not AND group 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
			RESULT = new AndExpr(a,b); 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("and_not",1, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // or ::= and_not 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
			RESULT = a;	
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("or",0, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= or EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).right;
		Expr start_val = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).value;
		RESULT = start_val;
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SearchParser$parser.done_parsing();
          return CUP$SearchParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // or ::= or OR and_not 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.peek()).value;
			RESULT = new OrExpr(a,b); 
              CUP$SearchParser$result = parser.getSymbolFactory().newSymbol("or",0, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)), ((java_cup.runtime.Symbol)CUP$SearchParser$stack.peek()), RESULT);
            }
          return CUP$SearchParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}







//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Thu Nov 02 11:57:31 GET 2006
//----------------------------------------------------
//
//import java_cup.runtime.*;
//
///** CUP v0.10k TUM Edition 20050516 generated parser.
//  * @version Thu Nov 02 11:57:31 GET 2006
//  */
//public class SearchParser extends java_cup.runtime.lr_parser {
//
//  /** Default constructor. */
//  public SearchParser() {super();}
//
//  /** Constructor which sets the default scanner. */
//  public SearchParser(java_cup.runtime.Scanner s) {super(s);}
//
//  /** Production table. */
//  protected static final short _production_table[][] = 
//    unpackFromStrings(new String[] {
//    "\000\031\000\002\003\005\000\002\002\004\000\002\003" +
//    "\003\000\002\004\005\000\002\004\005\000\002\004\003" +
//    "\000\002\005\005\000\002\005\003\000\002\006\004\000" +
//    "\002\006\003\000\002\012\005\000\002\012\003\000\002" +
//    "\013\005\000\002\013\003\000\002\007\005\000\002\007" +
//    "\005\000\002\007\003\000\002\014\003\000\002\020\006" +
//    "\000\002\017\005\000\002\017\003\000\002\016\004\000" +
//    "\002\016\003\000\002\015\004\000\002\015\003" });
//
//  /** Access to production table. */
//  public short[][] production_table() {return _production_table;}
//
//  /** Parse-action table. */
//  protected static final short[][] _action_table = 
//    unpackFromStrings(new String[] {
//    "\000\050\000\006\007\015\017\005\001\002\000\014\002" +
//    "\uffff\004\uffff\005\022\006\023\010\uffff\001\002\000\026" +
//    "\002\ufff0\004\ufff0\005\ufff0\006\ufff0\010\ufff0\011\ufff0\012" +
//    "\ufff0\013\ufff0\014\ufff0\016\ufff0\001\002\000\026\002\ufff1" +
//    "\004\ufff1\005\ufff1\006\ufff1\010\ufff1\011\ufff1\012\ufff1\013" +
//    "\ufff1\014\ufff1\016\ufff1\001\002\000\020\002\ufff8\004\ufff8" +
//    "\005\ufff8\006\ufff8\010\ufff8\011\041\016\042\001\002\000" +
//    "\006\002\040\004\020\001\002\000\014\002\ufffa\004\ufffa" +
//    "\005\ufffa\006\ufffa\010\ufffa\001\002\000\022\002\ufff6\004" +
//    "\ufff6\005\ufff6\006\ufff6\010\ufff6\011\ufff6\012\036\016\ufff6" +
//    "\001\002\000\026\002\ufff4\004\ufff4\005\ufff4\006\ufff4\010" +
//    "\ufff4\011\ufff4\012\ufff4\013\031\014\026\016\ufff4\001\002" +
//    "\000\014\002\ufffc\004\ufffc\005\ufffc\006\ufffc\010\ufffc\001" +
//    "\002\000\006\007\015\017\005\001\002\000\006\004\020" +
//    "\010\017\001\002\000\014\002\ufffb\004\ufffb\005\ufffb\006" +
//    "\ufffb\010\ufffb\001\002\000\006\007\015\017\005\001\002" +
//    "\000\014\002\001\004\001\005\022\006\023\010\001\001" +
//    "\002\000\006\007\015\017\005\001\002\000\006\007\015" +
//    "\017\005\001\002\000\014\002\ufffd\004\ufffd\005\ufffd\006" +
//    "\ufffd\010\ufffd\001\002\000\014\002\ufffe\004\ufffe\005\ufffe" +
//    "\006\ufffe\010\ufffe\001\002\000\006\014\uffeb\017\uffeb\001" +
//    "\002\000\006\014\034\017\005\001\002\000\006\013\033" +
//    "\017\005\001\002\000\006\013\uffe9\017\uffe9\001\002\000" +
//    "\026\002\ufff2\004\ufff2\005\ufff2\006\ufff2\010\ufff2\011\ufff2" +
//    "\012\ufff2\013\ufff2\014\ufff2\016\ufff2\001\002\000\006\013" +
//    "\uffea\017\uffea\001\002\000\006\014\uffec\017\uffec\001\002" +
//    "\000\026\002\ufff3\004\ufff3\005\ufff3\006\ufff3\010\ufff3\011" +
//    "\ufff3\012\ufff3\013\ufff3\014\ufff3\016\ufff3\001\002\000\004" +
//    "\017\005\001\002\000\026\002\ufff5\004\ufff5\005\ufff5\006" +
//    "\ufff5\010\ufff5\011\ufff5\012\ufff5\013\031\014\026\016\ufff5" +
//    "\001\002\000\004\002\000\001\002\000\004\017\005\001" +
//    "\002\000\004\007\044\001\002\000\014\002\ufff9\004\ufff9" +
//    "\005\ufff9\006\ufff9\010\ufff9\001\002\000\004\020\045\001" +
//    "\002\000\006\010\uffed\015\uffed\001\002\000\006\010\050" +
//    "\015\047\001\002\000\004\020\051\001\002\000\014\002" +
//    "\uffef\004\uffef\005\uffef\006\uffef\010\uffef\001\002\000\006" +
//    "\010\uffee\015\uffee\001\002\000\022\002\ufff7\004\ufff7\005" +
//    "\ufff7\006\ufff7\010\ufff7\011\ufff7\012\036\016\ufff7\001\002" +
//    "" });
//
//  /** Access to parse-action table. */
//  public short[][] action_table() {return _action_table;}
//
//  /** <code>reduce_goto</code> table. */
//  protected static final short[][] _reduce_table = 
//    unpackFromStrings(new String[] {
//    "\000\050\000\022\003\007\004\003\005\013\006\010\007" +
//    "\012\012\006\013\011\014\005\001\001\000\002\001\001" +
//    "\000\002\001\001\000\002\001\001\000\004\020\042\001" +
//    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
//    "\000\006\015\027\016\026\001\001\000\002\001\001\000" +
//    "\022\003\015\004\003\005\013\006\010\007\012\012\006" +
//    "\013\011\014\005\001\001\000\002\001\001\000\002\001" +
//    "\001\000\020\004\020\005\013\006\010\007\012\012\006" +
//    "\013\011\014\005\001\001\000\002\001\001\000\016\005" +
//    "\024\006\010\007\012\012\006\013\011\014\005\001\001" +
//    "\000\016\005\023\006\010\007\012\012\006\013\011\014" +
//    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
//    "\001\001\000\004\014\034\001\001\000\004\014\031\001" +
//    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
//    "\000\002\001\001\000\002\001\001\000\006\007\036\014" +
//    "\005\001\001\000\006\015\027\016\026\001\001\000\002" +
//    "\001\001\000\010\007\012\013\051\014\005\001\001\000" +
//    "\002\001\001\000\002\001\001\000\004\017\045\001\001" +
//    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
//    "\002\001\001\000\002\001\001\000\002\001\001" });
//
//  /** Access to <code>reduce_goto</code> table. */
//  public short[][] reduce_table() {return _reduce_table;}
//
//  /** Instance of action encapsulation class. */
//  protected CUP$SearchParser$actions action_obj;
//
//  /** Action encapsulation object initializer. */
//  protected void init_actions()
//    {
//      action_obj = new CUP$SearchParser$actions(this);
//    }
//
//  /** Invoke a user supplied parse action. */
//  public java_cup.runtime.Symbol do_action(
//    int                        act_num,
//    java_cup.runtime.lr_parser parser,
//    java.util.Stack            stack,
//    int                        top)
//    throws java.lang.Exception
//  {
//    /* call code in generated class */
//    return action_obj.CUP$SearchParser$do_action(act_num, parser, stack, top);
//  }
//
//  /** Indicates start state. */
//  public int start_state() {return 0;}
//  /** Indicates start production. */
//  public int start_production() {return 1;}
//
//  /** <code>EOF</code> Symbol index. */
//  public int EOF_sym() {return 0;}
//
//  /** <code>error</code> Symbol index. */
//  public int error_sym() {return 1;}
//
//
//
//    
//   
//    public void report_error(String message, Object info) {
//   
//        StringBuffer m = new StringBuffer("Error");
//   
//        if (info instanceof java_cup.runtime.Symbol) {
//           
//            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);   
//            
//            if (s.left >= 0) {                
//
//                m.append(" in line "+(s.left));   
//                
//                if (s.right >= 0)                    
//                    
//                    m.append(", column "+(s.right));
//            }
//        }
//   
//        m.append(" : "+message);
//   
//        System.err.println(m);
//    }
//   
//   
//    public void report_fatal_error(String message, Object info) {
//        report_error(message, info);
//        System.exit(1);
//    }
//
//}
//
///** Cup generated class to encapsulate user supplied action code.*/
//class CUP$SearchParser$actions {
//  private final SearchParser parser;
//
//  /** Constructor */
//  CUP$SearchParser$actions(SearchParser parser) {
//    this.parser = parser;
//  }
//
//  /** Method with the actual generated action code. */
//  public final java_cup.runtime.Symbol CUP$SearchParser$do_action(
//    int                        CUP$SearchParser$act_num,
//    java_cup.runtime.lr_parser CUP$SearchParser$parser,
//    java.util.Stack            CUP$SearchParser$stack,
//    int                        CUP$SearchParser$top)
//    throws java.lang.Exception
//    {
//      /* Symbol object for return from actions */
//      java_cup.runtime.Symbol CUP$SearchParser$result;
//
//      /* select the action based on the action number */
//      switch (CUP$SearchParser$act_num)
//        {
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 24: // dots ::= DOT 
//            {
//              Counter RESULT = null;
//		 RESULT = new Counter(); 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(11/*dots*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 23: // dots ::= dots DOT 
//            {
//              Counter RESULT = null;
//		int dleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left;
//		int dright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).right;
//		Counter d = (Counter)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).value;
//		 RESULT = d.add(); 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(11/*dots*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 22: // amps ::= AMP 
//            {
//              Counter RESULT = null;
//		 RESULT = new Counter(); 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(12/*amps*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 21: // amps ::= amps AMP 
//            {
//              Counter RESULT = null;
//		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left;
//		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).right;
//		Counter a = (Counter)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).value;
//		
//			RESULT = a.add(); 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(12/*amps*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 20: // field_list ::= NUMBER 
//            {
//              FieldList RESULT = null;
//		int nleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int nright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//			RESULT = new FieldList(n);
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(13/*field_list*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 19: // field_list ::= field_list COMMA NUMBER 
//            {
//              FieldList RESULT = null;
//		int dleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left;
//		int dright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).right;
//		FieldList d = (FieldList)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).value;
//		int nleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int nright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//			RESULT = d.add(n); 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(13/*field_list*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 18: // op_q ::= SLASH LPAREN field_list RPAREN 
//            {
//              FieldList RESULT = null;
//		int dleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left;
//		int dright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).right;
//		FieldList d = (FieldList)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).value;
//			RESULT = d; 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(14/*op_q*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 17: // term ::= TERM 
//            {
//              SearchTerm RESULT = null;
//		int tleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int tright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		String t = (String)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//		 
//		
//		RESULT= new SearchTerm(t); 
//	
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(10/*term*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 16: // dot_amp ::= term 
//            {
//              Expr RESULT = null;
//		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		SearchTerm a = (SearchTerm)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//			RESULT = a; 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(5/*dot_amp*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 15: // dot_amp ::= dot_amp dots term 
//            {
//              Expr RESULT = null;
//		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left;
//		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).right;
//		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).value;
//		int bleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left;
//		int bright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).right;
//		Counter b = (Counter)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).value;
//		int cleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int cright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		SearchTerm c = (SearchTerm)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//			RESULT = new DotExpr(b.getCount(),a,c); 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(5/*dot_amp*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 14: // dot_amp ::= dot_amp amps term 
//            {
//              Expr RESULT = null;
//		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left;
//		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).right;
//		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).value;
//		int bleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left;
//		int bright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).right;
//		Counter b = (Counter)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).value;
//		int cleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int cright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		SearchTerm c = (SearchTerm)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//		 RESULT = new AmpExpr(b.getCount(),a,c); 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(5/*dot_amp*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 13: // f_op ::= dot_amp 
//            {
//              Expr RESULT = null;
//		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//			RESULT = a; 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(9/*f_op*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 12: // f_op ::= f_op F_OP dot_amp 
//            {
//              Expr RESULT = null;
//		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left;
//		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).right;
//		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).value;
//		int bleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int bright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//			RESULT = new FExpr(a,b); 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(9/*f_op*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 11: // g_op ::= f_op 
//            {
//              Expr RESULT = null;
//		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//		 RESULT = a; 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(8/*g_op*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 10: // g_op ::= g_op G_OP f_op 
//            {
//              Expr RESULT = null;
//		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left;
//		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).right;
//		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).value;
//		int bleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int bright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//		 RESULT = new GExpr(a,b); 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(8/*g_op*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 9: // f_def ::= g_op 
//            {
//              Expr RESULT = null;
//		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//			RESULT = new FdQual(a); 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(4/*f_def*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 8: // f_def ::= g_op op_q 
//            {
//              Expr RESULT = null;
//		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left;
//		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).right;
//		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).value;
//		int bleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int bright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		FieldList b = (FieldList)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//			RESULT = new FdQual(a,b);
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(4/*f_def*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 7: // group ::= f_def 
//            {
//              Expr RESULT = null;
//		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//			RESULT = a; 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(3/*group*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 6: // group ::= LPAREN or RPAREN 
//            {
//              Expr RESULT = null;
//		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left;
//		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).right;
//		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).value;
//		 RESULT = a; 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(3/*group*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 5: // and_not ::= group 
//            {
//              Expr RESULT = null;
//		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//			RESULT = a; 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(2/*and_not*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 4: // and_not ::= and_not NOT group 
//            {
//              Expr RESULT = null;
//		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left;
//		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).right;
//		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).value;
//		int bleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int bright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//			RESULT = new NotExpr(a,b); 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(2/*and_not*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 3: // and_not ::= and_not AND group 
//            {
//              Expr RESULT = null;
//		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left;
//		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).right;
//		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).value;
//		int bleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int bright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//			RESULT = new AndExpr(a,b); 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(2/*and_not*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 2: // or ::= and_not 
//            {
//              Expr RESULT = null;
//		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//			RESULT = a;	
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(1/*or*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 1: // $START ::= or EOF 
//            {
//              Object RESULT = null;
//		int start_valleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left;
//		int start_valright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).right;
//		Expr start_val = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).value;
//		RESULT = start_val;
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          /* ACCEPT */
//          CUP$SearchParser$parser.done_parsing();
//          return CUP$SearchParser$result;
//
//          /*. . . . . . . . . . . . . . . . . . . .*/
//          case 0: // or ::= or OR and_not 
//            {
//              Expr RESULT = null;
//		int aleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left;
//		int aright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).right;
//		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).value;
//		int bleft = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).left;
//		int bright = ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right;
//		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).value;
//			RESULT = new OrExpr(a,b); 
//              CUP$SearchParser$result = new java_cup.runtime.Symbol(1/*or*/, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SearchParser$stack.elementAt(CUP$SearchParser$top-0)).right, RESULT);
//            }
//          return CUP$SearchParser$result;
//
//          /* . . . . . .*/
//          default:
//            throw new Exception(
//               "Invalid action number found in internal parse table");
//
//        }
//    }
//}
//
