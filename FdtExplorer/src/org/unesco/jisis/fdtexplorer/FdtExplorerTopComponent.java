/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.unesco.jisis.fdtexplorer;

import java.io.Serializable;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Logger;
import javax.swing.table.TableColumn;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.unesco.jisis.corelib.client.ConnectionInfo;
import org.unesco.jisis.corelib.client.ConnectionPool;
import org.unesco.jisis.corelib.common.IDatabase;
import org.unesco.jisis.corelib.exceptions.DbException;
import org.unesco.jisis.gui.GuiUtils;
import org.unesco.jisis.jisiscore.client.ClientDatabaseProxy;
import org.unesco.jisis.jisiscore.common.FDTModelEx;

//import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
final class FdtExplorerTopComponent extends TopComponent implements Observer  {

   private static FdtExplorerTopComponent instance;
   /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
   private static final String PREFERRED_ID = "FdtExplorerTopComponent";
   private FDTModelEx fdtModel_ = null;
   private ClientDatabaseProxy db_;
   private static final String MODE = "explorer"; // NOI18N

   public FdtExplorerTopComponent(IDatabase db) {
       if ( db instanceof ClientDatabaseProxy) {
         db_ = (ClientDatabaseProxy) db;
       }else {
         throw new RuntimeException("RecordDataBrowserTopComponent: Cannot cast DB to ClientDatabaseProxy");
       }

       /* Register this TopComponent as attached to this DB */
       db_.addWindow(this);

       /* Add this TopComponent as Observer to DB changes */
       db_.addObserver((Observer) this);
      initComponents();
      load(db_);
      initTable();
      GuiUtils.TweakJTable(tblFDT);
      tblFDT.setModel(fdtModel_);
      //tblFDT.getSelectionModel().addListSelectionListener(this);
      setName(NbBundle.getMessage(FdtExplorerTopComponent.class, "CTL_FdtExplorerTopComponent"));
      setToolTipText(NbBundle.getMessage(FdtExplorerTopComponent.class, "HINT_FdtExplorerTopComponent"));
      try {
//        setIcon(Utilities.loadImage(ICON_PATH, true));
         /* Display the db name on the tab index */
         this.setDisplayName("FDT Explorer" + " (" +db.getDbHome()+"//"+ db.getDatabaseName() + ")");
      } catch (DbException ex) {
         Exceptions.printStackTrace(ex);
      }

   }
   private void initTable() {
    // Tag column
    TableColumn col = tblFDT.getColumnModel().getColumn(0);
    int width = 50;
    col.setPreferredWidth(width);
    // Description column
    width = 300;
    col = tblFDT.getColumnModel().getColumn(1);
    col.setPreferredWidth(width);
    width = 50;
    col = tblFDT.getColumnModel().getColumn(2);
    col.setPreferredWidth(width);

   }

   public void load(IDatabase db) {

      try {
         /** Build the model from the fdt provided by the server */
         fdtModel_ = new FDTModelEx(db.getFieldDefinitionTable());
      } catch (DbException ex) {
         Exceptions.printStackTrace(ex);
      }

      tblFDT.setModel(fdtModel_);
      //tblFDT.getSelectionModel().addListSelectionListener(this);

      if (tblFDT.getRowCount() > 0) {
         tblFDT.setRowSelectionInterval(0, 0);
      }

   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      fdtScrollPane = new javax.swing.JScrollPane();
      tblFDT = new javax.swing.JTable();

      tblFDT.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {
            {},
            {},
            {},
            {}
         },
         new String [] {

         }
      ));
      fdtScrollPane.setViewportView(tblFDT);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 400, Short.MAX_VALUE)
         .addGap(0, 400, Short.MAX_VALUE)
         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
               .addContainerGap()
               .addComponent(fdtScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addContainerGap(27, Short.MAX_VALUE)))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 467, Short.MAX_VALUE)
         .addGap(0, 467, Short.MAX_VALUE)
         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
               .addGap(54, 54, 54)
               .addComponent(fdtScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
      );
   }// </editor-fold>//GEN-END:initComponents
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JScrollPane fdtScrollPane;
   private javax.swing.JTable tblFDT;
   // End of variables declaration//GEN-END:variables

   /**
    * Gets default instance. Do not use directly: reserved for *.settings files only,
    * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
    * To obtain the singleton instance, use {@link #findInstance}.
    */
    public static synchronized FdtExplorerTopComponent getDefault() {
        if (instance != null) {
            instance.close();
            instance = null;
        }
        ConnectionInfo connectionInfo = ConnectionPool.getDefaultConnectionInfo();
        if (connectionInfo.getDefaultDatabase() != null && instance == null) {
            instance = new FdtExplorerTopComponent(connectionInfo.getDefaultDatabase());
        }
        return instance;
    }

   /**
    * Obtain the FdtExplorerTopComponent instance. Never call {@link #getDefault} directly!
    */
   public static synchronized FdtExplorerTopComponent findInstance() {
      TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
      if (win == null) {
         Logger.getLogger(FdtExplorerTopComponent.class.getName()).warning(
                 "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
         return getDefault();
      }
      if (win instanceof FdtExplorerTopComponent) {
         return (FdtExplorerTopComponent) win;
      }
      Logger.getLogger(FdtExplorerTopComponent.class.getName()).warning(
              "There seem to be multiple components with the '" + PREFERRED_ID +
              "' ID. That is a potential source of errors and unexpected behavior.");
      return getDefault();
   }


   @Override
   public void open() {
      Mode m = WindowManager.getDefault().findMode(MODE);
      m.dockInto(this);
      super.open();

   }
  
 
   @Override
   public int getPersistenceType() {
      return TopComponent.PERSISTENCE_NEVER;
   }

   @Override
   public void componentOpened() {
      // TODO add custom code on component opening
   }

   @Override
   public void componentClosed() {
      // TODO add custom code on component closing
   }

   /** replaces this in object stream */
   @Override
   public Object writeReplace() {
      return new ResolvableHelper();
   }

   @Override
   protected String preferredID() {
      return PREFERRED_ID;
   }

   public void update(Observable arg0, Object arg1) {
       if (db_.databaseHasChanged()) {
          load(db_);
           tblFDT.setModel(fdtModel_);
         tblFDT.updateUI();

      }
    
   }

   final static class ResolvableHelper implements Serializable {

      private static final long serialVersionUID = 1L;

      public Object readResolve() {
         return FdtExplorerTopComponent.getDefault();
      }
   }
}
