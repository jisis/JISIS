/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package QueryBuilder;

import java.awt.Cursor;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.Transferable;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.Serializable;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JFrame;
import javax.swing.RepaintManager;
import javax.swing.SwingUtilities;

import javax.swing.text.DefaultEditorKit;
import org.openide.awt.UndoRedo;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
final class QueryBuilderTopComponent extends TopComponent implements
        ClipboardOwner,
        KeyListener
{

    private static QueryBuilderTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";

    private static final String PREFERRED_ID = "QueryBuilderTopComponent";

    private UndoRedo.Manager undoRedoManager_ = new UndoRedo.Manager();


    private QueryBuilderTopComponent() {
        initComponents();
        hookActions();
        editorPane_.getDocument().addUndoableEditListener(undoRedoManager_);

        setName(NbBundle.getMessage(QueryBuilderTopComponent.class, "CTL_QueryBuilderTopComponent"));
        setToolTipText(NbBundle.getMessage(QueryBuilderTopComponent.class, "HINT_QueryBuilderTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
        
    }
    @Override
    public UndoRedo getUndoRedo() {
       return undoRedoManager_;
    }

   void executeQuery(String text) {
      throw new UnsupportedOperationException("Not yet implemented");
   }

   void populate(String text, boolean b) {
      throw new UnsupportedOperationException("Not yet implemented");
   }

   private final transient Action cutPerformer = new QBCutAction();
   private final transient Action copyPerformer = new QBCopyAction();
   private final transient Action pastePerformer = new QBPasteAction();
   private final transient Action deletePerformer = new QBDeleteAction();
    private void hookActions() {
        // hook into the netbeans Edit menu
    
       getActionMap ().put (DefaultEditorKit.cutAction, cutPerformer);
       getActionMap ().put (DefaultEditorKit.copyAction, copyPerformer);
       getActionMap ().put (DefaultEditorKit.pasteAction, pastePerformer);
       getActionMap ().put ("delete" , deletePerformer);
        // for now cut / copy is always disabled.
        disableCutCopy();
        deletePerformer.setEnabled(false);

    }
   


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      vertSplitPane = new javax.swing.JSplitPane();
      topPanel_ = new javax.swing.JPanel();
      controlPanel_ = new javax.swing.JPanel();
      choosePanel_ = new javax.swing.JPanel();
      fstjPanel_ = new javax.swing.JPanel();
      luceneOperatorsjPanel_ = new javax.swing.JPanel();
      btnWildCharMultiple = new javax.swing.JButton();
      btnWildCharSingle = new javax.swing.JButton();
      jLabel4 = new javax.swing.JLabel();
      jLabel5 = new javax.swing.JLabel();
      termsPanel = new javax.swing.JPanel();
      jLabel3 = new javax.swing.JLabel();
      fieldPanel = new javax.swing.JPanel();
      jLabel1 = new javax.swing.JLabel();
      jScrollPane1 = new javax.swing.JScrollPane();
      fstTable_ = new javax.swing.JTable();
      jPanel1 = new javax.swing.JPanel();
      jButton1 = new javax.swing.JButton();
      jLabel8 = new javax.swing.JLabel();
      jPanel2 = new javax.swing.JPanel();
      bottomPanel_ = new javax.swing.JPanel();
      editorScrollPane_ = new javax.swing.JScrollPane();
      editorPane_ = new QueryBuilderEditor(this);

      vertSplitPane.setDividerLocation(300);
      vertSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

      controlPanel_.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

      javax.swing.GroupLayout controlPanel_Layout = new javax.swing.GroupLayout(controlPanel_);
      controlPanel_.setLayout(controlPanel_Layout);
      controlPanel_Layout.setHorizontalGroup(
         controlPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 941, Short.MAX_VALUE)
      );
      controlPanel_Layout.setVerticalGroup(
         controlPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 78, Short.MAX_VALUE)
      );

      choosePanel_.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

      luceneOperatorsjPanel_.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

      btnWildCharMultiple.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(btnWildCharMultiple, org.openide.util.NbBundle.getMessage(QueryBuilderTopComponent.class, "QueryBuilderTopComponent.btnWildCharMultiple.text")); // NOI18N
      btnWildCharMultiple.setToolTipText(org.openide.util.NbBundle.getMessage(QueryBuilderTopComponent.class, "QueryBuilderTopComponent.btnWildCharMultiple.toolTipText")); // NOI18N
      btnWildCharMultiple.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnWildCharMultipleActionPerformed(evt);
         }
      });

      btnWildCharSingle.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(btnWildCharSingle, org.openide.util.NbBundle.getMessage(QueryBuilderTopComponent.class, "QueryBuilderTopComponent.btnWildCharSingle.text")); // NOI18N
      btnWildCharSingle.setToolTipText(org.openide.util.NbBundle.getMessage(QueryBuilderTopComponent.class, "QueryBuilderTopComponent.btnWildCharSingle.toolTipText")); // NOI18N

      jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(QueryBuilderTopComponent.class, "QueryBuilderTopComponent.jLabel4.text")); // NOI18N

      jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(QueryBuilderTopComponent.class, "QueryBuilderTopComponent.jLabel5.text")); // NOI18N

      javax.swing.GroupLayout luceneOperatorsjPanel_Layout = new javax.swing.GroupLayout(luceneOperatorsjPanel_);
      luceneOperatorsjPanel_.setLayout(luceneOperatorsjPanel_Layout);
      luceneOperatorsjPanel_Layout.setHorizontalGroup(
         luceneOperatorsjPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(luceneOperatorsjPanel_Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(luceneOperatorsjPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel4)
               .addGroup(luceneOperatorsjPanel_Layout.createSequentialGroup()
                  .addGap(5, 5, 5)
                  .addComponent(jLabel5)
                  .addGap(18, 18, 18)
                  .addComponent(btnWildCharMultiple)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(btnWildCharSingle)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      luceneOperatorsjPanel_Layout.setVerticalGroup(
         luceneOperatorsjPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(luceneOperatorsjPanel_Layout.createSequentialGroup()
            .addComponent(jLabel4)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(luceneOperatorsjPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel5)
               .addComponent(btnWildCharMultiple)
               .addComponent(btnWildCharSingle))
            .addContainerGap())
      );

      termsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(QueryBuilderTopComponent.class, "QueryBuilderTopComponent.termsPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

      jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
      org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(QueryBuilderTopComponent.class, "QueryBuilderTopComponent.jLabel3.text")); // NOI18N

      javax.swing.GroupLayout termsPanelLayout = new javax.swing.GroupLayout(termsPanel);
      termsPanel.setLayout(termsPanelLayout);
      termsPanelLayout.setHorizontalGroup(
         termsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(termsPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(99, Short.MAX_VALUE))
      );
      termsPanelLayout.setVerticalGroup(
         termsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(termsPanelLayout.createSequentialGroup()
            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      fieldPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(QueryBuilderTopComponent.class, "QueryBuilderTopComponent.fieldPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

      jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(QueryBuilderTopComponent.class, "QueryBuilderTopComponent.jLabel1.text")); // NOI18N

      fstTable_.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {
            {null, null},
            {null, null},
            {null, null},
            {null, null}
         },
         new String [] {
            "ID", "Format"
         }
      ) {
         boolean[] canEdit = new boolean [] {
            false, false
         };

         public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
         }
      });
      jScrollPane1.setViewportView(fstTable_);

      javax.swing.GroupLayout fieldPanelLayout = new javax.swing.GroupLayout(fieldPanel);
      fieldPanel.setLayout(fieldPanelLayout);
      fieldPanelLayout.setHorizontalGroup(
         fieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(fieldPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(fieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
               .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
      );
      fieldPanelLayout.setVerticalGroup(
         fieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(fieldPanelLayout.createSequentialGroup()
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
      );

      jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(QueryBuilderTopComponent.class, "QueryBuilderTopComponent.jPanel1.border.title"), javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

      jButton1.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(QueryBuilderTopComponent.class, "QueryBuilderTopComponent.jButton1.text")); // NOI18N

      org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(QueryBuilderTopComponent.class, "QueryBuilderTopComponent.jLabel8.text")); // NOI18N

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(jButton1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(1680, Short.MAX_VALUE))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton1)
               .addComponent(jLabel8))
            .addContainerGap())
      );

      jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(QueryBuilderTopComponent.class, "QueryBuilderTopComponent.jPanel2.border.title"), javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 427, Short.MAX_VALUE)
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 14, Short.MAX_VALUE)
      );

      javax.swing.GroupLayout fstjPanel_Layout = new javax.swing.GroupLayout(fstjPanel_);
      fstjPanel_.setLayout(fstjPanel_Layout);
      fstjPanel_Layout.setHorizontalGroup(
         fstjPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(fstjPanel_Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(fstjPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(termsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(fieldPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(fstjPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(fstjPanel_Layout.createSequentialGroup()
                  .addComponent(luceneOperatorsjPanel_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addGap(1822, 1822, 1822))
               .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
      );
      fstjPanel_Layout.setVerticalGroup(
         fstjPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(fstjPanel_Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(fstjPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(fstjPanel_Layout.createSequentialGroup()
                  .addComponent(termsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(fieldPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(fstjPanel_Layout.createSequentialGroup()
                  .addComponent(luceneOperatorsjPanel_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(1, 1, 1)
                  .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(21, Short.MAX_VALUE))
      );

      javax.swing.GroupLayout choosePanel_Layout = new javax.swing.GroupLayout(choosePanel_);
      choosePanel_.setLayout(choosePanel_Layout);
      choosePanel_Layout.setHorizontalGroup(
         choosePanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(choosePanel_Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(fstjPanel_, javax.swing.GroupLayout.PREFERRED_SIZE, 921, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      choosePanel_Layout.setVerticalGroup(
         choosePanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(choosePanel_Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(fstjPanel_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
      );

      javax.swing.GroupLayout topPanel_Layout = new javax.swing.GroupLayout(topPanel_);
      topPanel_.setLayout(topPanel_Layout);
      topPanel_Layout.setHorizontalGroup(
         topPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(topPanel_Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(topPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(choosePanel_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(controlPanel_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
      );
      topPanel_Layout.setVerticalGroup(
         topPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(topPanel_Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(controlPanel_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(choosePanel_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      vertSplitPane.setLeftComponent(topPanel_);

      bottomPanel_.setPreferredSize(new java.awt.Dimension(758, 300));

      editorScrollPane_.setViewportView(editorPane_);

      javax.swing.GroupLayout bottomPanel_Layout = new javax.swing.GroupLayout(bottomPanel_);
      bottomPanel_.setLayout(bottomPanel_Layout);
      bottomPanel_Layout.setHorizontalGroup(
         bottomPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(bottomPanel_Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(editorScrollPane_)
            .addContainerGap())
      );
      bottomPanel_Layout.setVerticalGroup(
         bottomPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bottomPanel_Layout.createSequentialGroup()
            .addContainerGap(57, Short.MAX_VALUE)
            .addComponent(editorScrollPane_, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );

      vertSplitPane.setRightComponent(bottomPanel_);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(vertSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 918, Short.MAX_VALUE)
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(vertSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 627, Short.MAX_VALUE)
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents

   private void btnWildCharMultipleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWildCharMultipleActionPerformed
      // TODO add your handling code here:
   }//GEN-LAST:event_btnWildCharMultipleActionPerformed


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JPanel bottomPanel_;
   private javax.swing.JButton btnWildCharMultiple;
   private javax.swing.JButton btnWildCharSingle;
   private javax.swing.JPanel choosePanel_;
   private javax.swing.JPanel controlPanel_;
   private javax.swing.JEditorPane editorPane_;
   private javax.swing.JScrollPane editorScrollPane_;
   private javax.swing.JPanel fieldPanel;
   private javax.swing.JTable fstTable_;
   private javax.swing.JPanel fstjPanel_;
   private javax.swing.JButton jButton1;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JPanel luceneOperatorsjPanel_;
   private javax.swing.JPanel termsPanel;
   private javax.swing.JPanel topPanel_;
   private javax.swing.JSplitPane vertSplitPane;
   // End of variables declaration//GEN-END:variables
   /**
    * Gets default instance. Do not use directly: reserved for *.settings files only,
    * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
    * To obtain the singleton instance, use {@link #findInstance}.
    */
   public static synchronized QueryBuilderTopComponent getDefault() {
      if (instance == null) {
         instance = new QueryBuilderTopComponent();
      }
      return instance;
   }

   /**
    * Obtain the QueryBuilderTopComponent instance. Never call {@link #getDefault} directly!
    */
   public static synchronized QueryBuilderTopComponent findInstance() {
      TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
      if (win == null) {
         Logger.getLogger(QueryBuilderTopComponent.class.getName()).warning(
                 "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
         return getDefault();
      }
      if (win instanceof QueryBuilderTopComponent) {
         return (QueryBuilderTopComponent) win;
      }
      Logger.getLogger(QueryBuilderTopComponent.class.getName()).warning(
              "There seem to be multiple components with the '" + PREFERRED_ID +
              "' ID. That is a potential source of errors and unexpected behavior.");
      return getDefault();
   }

   @Override
   public int getPersistenceType() {
      return TopComponent.PERSISTENCE_NEVER;
   }

   @Override
   public void componentOpened() {

   }

   @Override
   public void componentClosed() {
      // TODO add custom code on component closing
   }

   /** replaces this in object stream */
   @Override
   public Object writeReplace() {
      return new ResolvableHelper();
   }

   @Override
   protected String preferredID() {
      return PREFERRED_ID;
   }

   public void lostOwnership(Clipboard arg0, Transferable arg1) {
      throw new UnsupportedOperationException("Not supported yet.");
   }

   public void keyTyped(KeyEvent arg0) {
      throw new UnsupportedOperationException("Not supported yet.");
   }

   public void keyPressed(KeyEvent arg0) {
      throw new UnsupportedOperationException("Not supported yet.");
   }

   public void keyReleased(KeyEvent arg0) {
      throw new UnsupportedOperationException("Not supported yet.");
   }

   final static class ResolvableHelper implements Serializable {

      private static final long serialVersionUID = 1L;

      public Object readResolve() {
         return QueryBuilderTopComponent.getDefault();
      }
   }
   

    /** Called when the selection is removed: disable cut/copy */
    void disableCutCopy() {
        cutPerformer.setEnabled(false);
        copyPerformer.setEnabled(false);
    }
    /** Called when a selection is detected by editorPane_ CaretListenerSelection */
    void enableCutCopy() {
        cutPerformer.setEnabled(true);
        copyPerformer.setEnabled(true);
    }

    void enablePaste() {
       pastePerformer.setEnabled(true);
    }

    void disablePaste() {
       pastePerformer.setEnabled(false);
    }

   



   /**
     * Showing/hiding busy cursor, before this funcionality was in Rave winsys,
     * the code is copied from that module.
     * It needs to be called from event-dispatching thread to work synch,
     * otherwise it is scheduled into that thread. */
    static void showBusyCursor(final boolean busy) {
        if(SwingUtilities.isEventDispatchThread()) {
            doShowBusyCursor(busy);
        } else {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    doShowBusyCursor(busy);
                }
            });
        }
    }

    private static void doShowBusyCursor(boolean busy) {
        JFrame mainWindow = (JFrame)WindowManager.getDefault().getMainWindow();
        if(busy){
            RepaintManager.currentManager(mainWindow).paintDirtyRegions();
            mainWindow.getGlassPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            mainWindow.getGlassPane().setVisible(true);
            mainWindow.repaint();
        } else {
            mainWindow.getGlassPane().setVisible(false);
            mainWindow.getGlassPane().setCursor(null);
            mainWindow.repaint();
        }
    }
    class QBDeleteAction extends AbstractAction {
    public void actionPerformed(ActionEvent evt) {
       System.out.println("Delete the Snipe");
    }
 }

class QBCutAction extends AbstractAction {
   public void actionPerformed(ActionEvent evt) {
     
      editorPane_.cut();
   }


   }

class QBCopyAction extends AbstractAction {
   public void actionPerformed(ActionEvent evt) {
      
      editorPane_.copy();
      enablePaste();
   }
}

class QBPasteAction extends AbstractAction {
   public void actionPerformed(ActionEvent evt) {
      
      editorPane_.paste();
   }
}


}
