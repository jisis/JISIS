/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SearchHistoryDialog.java
 *
 * Created on 4 oct. 2010, 22:10:13
 */

package org.unesco.jisis.searchhistory;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

/**
 *
 * @author jcd
 */
public class SearchHistoryDialog extends javax.swing.JDialog {

   private int returnStatus = RET_CANCEL;

    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;

    private SearchHistoryModel model_;

    private String selectError;

    /** Creates new form SearchHistoryDialog */
   public SearchHistoryDialog(java.awt.Frame parent, SearchHistoryModel model) {
      super(parent, true);
      model_ = model;
      initComponents();
      
      // Handle double click for selection
      MouseListener mouseListener = new MouseAdapter() {

         @Override
         public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() == 2) {
               int index = searchList.locationToIndex(e.getPoint());
               System.out.println("Double clicked on Item " + index);
               doClose(RET_OK);
            }
         }
      };
      searchList.addMouseListener(mouseListener);



   }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      cancelButton = new javax.swing.JButton();
      jScrollPane1 = new javax.swing.JScrollPane();
      searchList = new javax.swing.JList();
      jLabel1 = new javax.swing.JLabel();

      setTitle(org.openide.util.NbBundle.getMessage(SearchHistoryDialog.class, "SearchHistoryDialog.title")); // NOI18N
      addWindowListener(new java.awt.event.WindowAdapter() {
         public void windowClosing(java.awt.event.WindowEvent evt) {
            closeDialog(evt);
         }
      });

      cancelButton.setText(org.openide.util.NbBundle.getMessage(SearchHistoryDialog.class, "SearchHistoryDialog.cancelButton.text")); // NOI18N
      cancelButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            cancelButtonActionPerformed(evt);
         }
      });

      searchList.setModel(model_);
      searchList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      jScrollPane1.setViewportView(searchList);

      jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
      jLabel1.setText(org.openide.util.NbBundle.getMessage(SearchHistoryDialog.class, "SearchHistoryDialog.jLabel1.text")); // NOI18N

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(cancelButton)
               .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                  .addGap(36, 36, 36)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel1)
                     .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE))))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1)
            .addGap(18, 18, 18)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
            .addComponent(cancelButton)
            .addContainerGap())
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton cancelButton;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JList searchList;
   // End of variables declaration//GEN-END:variables

   /** Accept the input.
   *
   * @return <b>true</b> if an item is selected in the list, <b>false</b>
   * otherwise.
   */

   public boolean accept() {
      if (searchList.getSelectedIndex() < 0) {
         //DialogSet.getInstance().showMessageDialog(selectError);
         return (false);
      } else {
         return (true);
      }
   }

   public void setModel(SearchHistoryModel model) {
      model_ = model;


      searchList.setSelectedIndex(0);
   }

   /** Get the currently-selected index in the list.
    *
    * @return The index of the selected item, or <b>-1</b> if no item is currently
    * selected.
    */
   public int getSelectedIndex() {
      return searchList.getSelectedIndex();
   }

}


