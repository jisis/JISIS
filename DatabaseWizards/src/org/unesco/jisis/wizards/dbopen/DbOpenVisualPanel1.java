package org.unesco.jisis.wizards.dbopen;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JList;
import javax.swing.JPanel;
import org.openide.util.NbBundle;
import org.slf4j.LoggerFactory;
import org.unesco.jisis.corelib.client.ConnectionPool;
import org.unesco.jisis.corelib.common.IConnection;
import org.unesco.jisis.wizards.dbcreate.DbNamesModel;

public final class DbOpenVisualPanel1 extends JPanel {
    private DbOpenWizardPanel1 wizardDescriptor_;
    private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(DbOpenVisualPanel1.class);
    
    /** Creates new form DbOpenVisualPanel1 */
   public DbOpenVisualPanel1(DbOpenWizardPanel1 wizardDescriptor) {
      wizardDescriptor_ = wizardDescriptor;

      initComponents();
      MouseListener mouseListener = new MouseAdapter() {
         @Override
         public void mouseClicked(MouseEvent mouseEvent) {
            JList theList = (JList) mouseEvent.getSource();
            if (mouseEvent.getClickCount() == 2) {
               int index = theList.locationToIndex(mouseEvent.getPoint());
               if (index >= 0) {
                  Object o = theList.getModel().getElementAt(index);
                  //System.out.println("Double-clicked on: " + o.toString());
                  wizardDescriptor_.doFinishClick();

               }
            }
         }
      };
      jList1.addMouseListener(mouseListener);
   }
    
    public String getName() {
        return NbBundle.getMessage(DbOpenVisualPanel1.class, "MSG_DbOpenVisualPanel1");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jLabel1 = new javax.swing.JLabel();
      jComboBox1 = new javax.swing.JComboBox();
      jLabel2 = new javax.swing.JLabel();
      jScrollPane1 = new javax.swing.JScrollPane();
      jList1 = new javax.swing.JList();

      org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DbOpenVisualPanel1.class, "LBL_SelDBHOME")); // NOI18N

      jComboBox1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jComboBox1ActionPerformed(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(DbOpenVisualPanel1.class, "LBL_SelDBNAME")); // NOI18N

      jScrollPane1.setViewportView(jList1);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(jLabel1)
               .addComponent(jLabel2)
               .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
               .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jLabel2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
   }// </editor-fold>//GEN-END:initComponents

private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
    this.fillDbNames();
}//GEN-LAST:event_jComboBox1ActionPerformed
    
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JComboBox jComboBox1;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JList jList1;
   private javax.swing.JScrollPane jScrollPane1;
   // End of variables declaration//GEN-END:variables
 
    
    public String getDbHome() {
        Object selObject = jComboBox1.getSelectedItem();
        return (selObject == null ? "" : selObject.toString());
    }
    
    public String getDbName() {
        Object selObject = jList1.getSelectedValue();
        return (selObject == null ? "" : selObject.toString());
    }
    

    // Fill the fields
    
    public void fillDbHomes(String[] dbHomes) {
        jComboBox1.setModel(new DefaultComboBoxModel(dbHomes));
        jComboBox1.setSelectedIndex(0);
        //jList1.setModel(new DbHomesModel(dbHomes));
        jComboBox1.updateUI();
    }

    
    public void fillDbNames() {
        String dbHome = (String) this.jComboBox1.getSelectedItem();

        if (dbHome == null || dbHome.equals("")) {
            return;
        }

        IConnection conn = null;
        try {
            conn = ConnectionPool.getDefaultConnection();

            List<String> dbAllPermitted = conn.getDbNames(dbHome);
//                if (! conn.getUserInfo().getIsAdmin()) {
//                    List<String> dbPermitted = new ArrayList<String>();
//                    Map permissions = conn.getUserInfo().getPermissions();
//                    for (Object nameObj : permissions.keySet()) {
//                        String dbName = (String) nameObj;
//                        if (((Integer) permissions.get(dbName)) > 0)
//                            dbPermitted.add(dbName);
//                    }
//                    dbAllPermitted.retainAll(dbPermitted);
//                }
            this.fillDbNames(dbAllPermitted);

        } catch (Exception ex) {
            LOGGER.error("Cannot get the list database names", ex);
        }

    }
    
    public void fillDbNames(List<String> dbNames) {
        jList1.setModel(new DbNamesModel(Collections.enumeration(dbNames)));
        jList1.setSelectedIndex(0); // Select the first database, if there is none, this will do nothing.
        jList1.updateUI();
    }
    
}

