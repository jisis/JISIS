/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OpenDbDlg.java
 *
 * Created on Feb 24, 2009, 12:13:25 PM
 */

package org.unesco.jisis.wizards.dbopen;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import org.unesco.jisis.corelib.client.ConnectionPool;
import org.unesco.jisis.corelib.common.IConnection;
import org.unesco.jisis.wizards.dbcreate.DbNamesModel;

/**
 *
 * @author jc_dauphin
 */
public class OpenDbDlg extends javax.swing.JDialog {
   
   protected boolean succeeded_ = false;

    /** Creates new form OpenDbDlg */
    public OpenDbDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      lblHomeSelect = new javax.swing.JLabel();
      cmbHomeSelect = new javax.swing.JComboBox();
      lblDbSelect = new javax.swing.JLabel();
      lstDbSelect = new javax.swing.JList();
      btnOK = new javax.swing.JButton();
      btnCancel = new javax.swing.JButton();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

      lblHomeSelect.setText(org.openide.util.NbBundle.getMessage(OpenDbDlg.class, "OpenDbDlg.lblHomeSelect.text")); // NOI18N

      cmbHomeSelect.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmbHomeSelectActionPerformed(evt);
         }
      });

      lblDbSelect.setText(org.openide.util.NbBundle.getMessage(OpenDbDlg.class, "OpenDbDlg.lblDbSelect.text")); // NOI18N

      btnOK.setText(org.openide.util.NbBundle.getMessage(OpenDbDlg.class, "OpenDbDlg.btnOK.text")); // NOI18N
      btnOK.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnOKActionPerformed(evt);
         }
      });

      btnCancel.setText(org.openide.util.NbBundle.getMessage(OpenDbDlg.class, "OpenDbDlg.btnCancel.text")); // NOI18N
      btnCancel.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnCancelActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(lblDbSelect)
               .addComponent(lblHomeSelect))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(cmbHomeSelect, 0, 262, Short.MAX_VALUE)
               .addComponent(lstDbSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(57, 57, 57))
         .addGroup(layout.createSequentialGroup()
            .addGap(175, 175, 175)
            .addComponent(btnOK)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnCancel)
            .addContainerGap(148, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(26, 26, 26)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(cmbHomeSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(lblHomeSelect))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(32, 32, 32)
                  .addComponent(lblDbSelect)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 180, Short.MAX_VALUE))
               .addGroup(layout.createSequentialGroup()
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(lstDbSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(43, 43, 43)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(btnCancel)
               .addComponent(btnOK))
            .addGap(43, 43, 43))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void cmbHomeSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbHomeSelectActionPerformed
       this.fillDbNames();
}//GEN-LAST:event_cmbHomeSelectActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
       succeeded_ = false;
       dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
       succeeded_ = true;
       dispose();
    }//GEN-LAST:event_btnOKActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                OpenDbDlg dialog = new OpenDbDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnCancel;
   private javax.swing.JButton btnOK;
   private javax.swing.JComboBox cmbHomeSelect;
   private javax.swing.JLabel lblDbSelect;
   private javax.swing.JLabel lblHomeSelect;
   private javax.swing.JList lstDbSelect;
   // End of variables declaration//GEN-END:variables
 public String getDbHome() {
        Object selObject = cmbHomeSelect.getSelectedItem();
        return (selObject == null ? "" : selObject.toString());
    }

    public String getDbName() {
        Object selObject = lstDbSelect.getSelectedValue();
        return (selObject == null ? "" : selObject.toString());
    }


    // Fill the fields

    public void fillDbHomes(String[] dbHomes) {
        cmbHomeSelect.setModel(new DefaultComboBoxModel(dbHomes));
        cmbHomeSelect.setSelectedIndex(0);
        //jList1.setModel(new DbHomesModel(dbHomes));
        cmbHomeSelect.updateUI();
    }


    public void fillDbNames() {
        String dbHome = (String) this.cmbHomeSelect.getSelectedItem();

        if (dbHome == null || dbHome.equals("")) return;

        IConnection conn = null;
        try {
            conn = ConnectionPool.getDefaultConnection();

            try {
                List<String> dbAllPermitted = conn.getDbNames(dbHome);
                if (! conn.getUserInfo().getIsAdmin()) {
                    List<String> dbPermitted = new ArrayList<String>();
                    Map permissions = conn.getUserInfo().getPermissions();
                    for (Object nameObj : permissions.keySet()) {
                        String dbName = (String) nameObj;
                        if (((Integer) permissions.get(dbName)) > 0)
                            dbPermitted.add(dbName);
                    }
                    dbAllPermitted.retainAll(dbPermitted);
                }
                this.fillDbNames(dbAllPermitted);

            } catch (Exception ex) {
                throw new org.openide.util.NotImplementedException(ex.getMessage());
            }

        } catch (Exception  ex) {
            ex.printStackTrace();
        }


    }

    public void fillDbNames(List<String> dbNames) {
        lstDbSelect.setModel(new DbNamesModel(Collections.enumeration(dbNames)));
        lstDbSelect.setSelectedIndex(0); // Select the first database, if there is none, this will do nothing.
        lstDbSelect.updateUI();
    }
    public boolean succeeded() {
      return succeeded_;
   }
}
