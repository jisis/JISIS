/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportNewVisualPanel31.java
 *
 * Created on Feb 24, 2009, 3:53:47 PM
 */

package org.unesco.jisis.wizards.marc;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import org.unesco.jisis.corelib.client.ConnectionPool;
import org.unesco.jisis.corelib.common.IConnection;
import org.unesco.jisis.wizards.dbcreate.DbNamesModel;

/**
 *
 * @author jc_dauphin
 */
public class ImportNewVisualPanel31 extends javax.swing.JPanel {

   protected String selectedDbName_ = "";
    /** Creates new form ImportNewVisualPanel31 */
    public ImportNewVisualPanel31() {
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      lblDbSelect = new javax.swing.JLabel();
      lblHomeSelect = new javax.swing.JLabel();
      cmbHomeSelect = new javax.swing.JComboBox();
      lblSelectedDatabase = new javax.swing.JLabel();
      txtSelectedDatabase = new javax.swing.JTextField();
      jScrollPane1 = new javax.swing.JScrollPane();
      lstDbSelect = new javax.swing.JList();

      lblDbSelect.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
      lblDbSelect.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel31.class, "ImportNewVisualPanel31.lblDbSelect.text")); // NOI18N

      lblHomeSelect.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
      lblHomeSelect.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel31.class, "ImportNewVisualPanel31.lblHomeSelect.text")); // NOI18N

      cmbHomeSelect.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmbHomeSelectActionPerformed(evt);
         }
      });

      lblSelectedDatabase.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel31.class, "ImportNewVisualPanel31.lblSelectedDatabase.text")); // NOI18N

      txtSelectedDatabase.setEditable(false);
      txtSelectedDatabase.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel31.class, "ImportNewVisualPanel31.txtSelectedDatabase.text")); // NOI18N

      lstDbSelect.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
      lstDbSelect.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      lstDbSelect.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            lstDbSelectValueChanged(evt);
         }
      });
      jScrollPane1.setViewportView(lstDbSelect);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(40, 40, 40)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(lblDbSelect)
                     .addComponent(lblSelectedDatabase)))
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(lblHomeSelect)))
            .addGap(49, 49, 49)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(txtSelectedDatabase, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
               .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(cmbHomeSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(26, 26, 26))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(69, 69, 69)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(lblHomeSelect)
               .addComponent(cmbHomeSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addComponent(txtSelectedDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(layout.createSequentialGroup()
                  .addGap(69, 69, 69)
                  .addComponent(lblDbSelect)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 239, Short.MAX_VALUE)
                  .addComponent(lblSelectedDatabase)))
            .addGap(24, 24, 24))
      );
   }// </editor-fold>//GEN-END:initComponents

    private void cmbHomeSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbHomeSelectActionPerformed
       this.fillDbNames();
}//GEN-LAST:event_cmbHomeSelectActionPerformed

    private void lstDbSelectValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstDbSelectValueChanged
       // TODO add your handling code here:
       if (evt.getSource() == lstDbSelect && !evt.getValueIsAdjusting()) {
          selectedDbName_ = (String) lstDbSelect.getSelectedValue();
          if (selectedDbName_ != null)
             txtSelectedDatabase.setText(selectedDbName_);
       }
    }//GEN-LAST:event_lstDbSelectValueChanged


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JComboBox cmbHomeSelect;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JLabel lblDbSelect;
   private javax.swing.JLabel lblHomeSelect;
   private javax.swing.JLabel lblSelectedDatabase;
   private javax.swing.JList lstDbSelect;
   private javax.swing.JTextField txtSelectedDatabase;
   // End of variables declaration//GEN-END:variables

   public String getDbHome() {
        Object selObject = cmbHomeSelect.getSelectedItem();
        return (selObject == null ? "" : selObject.toString());
    }

    public String getDbName() {
        Object selObject = lstDbSelect.getSelectedValue();
        return (selObject == null ? "" : selObject.toString());
    }


    // Fill the fields

    public void fillDbHomes(String[] dbHomes) {
        cmbHomeSelect.setModel(new DefaultComboBoxModel(dbHomes));
        cmbHomeSelect.setSelectedIndex(0);
        //jList1.setModel(new DbHomesModel(dbHomes));
        cmbHomeSelect.updateUI();
    }


    public void fillDbNames() {
        String dbHome = (String) this.cmbHomeSelect.getSelectedItem();

        if (dbHome == null || dbHome.equals("")) return;

        IConnection conn = null;
        try {
            conn = ConnectionPool.getDefaultConnection();

            try {
                List<String> dbAllPermitted = conn.getDbNames(dbHome);
                if (! conn.getUserInfo().getIsAdmin()) {
                    List<String> dbPermitted = new ArrayList<String>();
                    Map permissions = conn.getUserInfo().getPermissions();
                    for (Object nameObj : permissions.keySet()) {
                        String dbName = (String) nameObj;
                        if (((Integer) permissions.get(dbName)) > 0)
                            dbPermitted.add(dbName);
                    }
                    dbAllPermitted.retainAll(dbPermitted);
                }
                this.fillDbNames(dbAllPermitted);

            } catch (Exception ex) {
                throw new org.openide.util.NotImplementedException(ex.getMessage());
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }


    }

    public void fillDbNames(List<String> dbNames) {
        lstDbSelect.setModel(new DbNamesModel(Collections.enumeration(dbNames)));
        lstDbSelect.setSelectedIndex(0); // Select the first database, if there is none, this will do nothing.
        lstDbSelect.updateUI();
    }
}
