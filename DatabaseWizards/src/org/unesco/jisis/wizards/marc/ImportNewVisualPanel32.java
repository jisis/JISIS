/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportNewVisualPanel3.java
 *
 * Created on Feb 24, 2009, 2:38:13 PM
 */

package org.unesco.jisis.wizards.marc;


import java.io.File;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.Document;
import org.openide.WizardDescriptor;
import org.openide.util.NbBundle;
import org.unesco.jisis.corelib.common.Global;
import org.unesco.jisis.jisisutils.FileExtFilter;

/**
 *
 * @author jc_dauphin
 */
public class ImportNewVisualPanel32 extends javax.swing.JPanel implements DocumentListener {

   public final static int CREATE_EMPTY_DB = 1;
   public final static int CREATE_DB_FROM_FDT = 2;

   protected ImportNewWizardPanel32 wizardDescriptor_;
   protected int createDbOption_ = CREATE_EMPTY_DB;
    /** Creates new form ImportNewVisualPanel3 */
    public ImportNewVisualPanel32(ImportNewWizardPanel32 wizardDescriptor) {
       wizardDescriptor_ = wizardDescriptor;
        initComponents();

//        cmbSubfieldDelimiter.setModel(new DefaultComboBoxModel(Global.ascii));
//        cmbSubfieldDelimiter.setSelectedItem("094 5E   ^    (caret circumflex)");
//        cmbReformattingFST.setModel(new DefaultComboBoxModel(DatabasePool.getFstNames()));

        txtDbName.getDocument().addDocumentListener(this);
        impFDT.getDocument().addDocumentListener(this);
        impFST.getDocument().addDocumentListener(this);
        //impFileName.getDocument().addDocumentListener(this);) {
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      buttonGroup1 = new javax.swing.ButtonGroup();
      rdbCreateDbFromFDT = new javax.swing.JRadioButton();
      rdbImportAndCreateDB = new javax.swing.JRadioButton();
      cmbDbHome = new javax.swing.JComboBox();
      lblDbHome = new javax.swing.JLabel();
      lblDbName = new javax.swing.JLabel();
      txtDbName = new javax.swing.JTextField();
      jSeparator1 = new javax.swing.JSeparator();
      lblFST = new javax.swing.JLabel();
      lblFDT = new javax.swing.JLabel();
      impFST = new javax.swing.JTextField();
      impFDT = new javax.swing.JTextField();
      btnFDTBrowse = new javax.swing.JButton();
      btnFSTBrowse = new javax.swing.JButton();

      setEnabled(false);

      buttonGroup1.add(rdbCreateDbFromFDT);
      rdbCreateDbFromFDT.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel32.class, "ImportNewVisualPanel32.rdbCreateDbFromFDT.text")); // NOI18N
      rdbCreateDbFromFDT.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            rdbCreateDbFromFDTActionPerformed(evt);
         }
      });

      buttonGroup1.add(rdbImportAndCreateDB);
      rdbImportAndCreateDB.setSelected(true);
      rdbImportAndCreateDB.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel32.class, "ImportNewVisualPanel32.rdbImportAndCreateDB.text")); // NOI18N
      rdbImportAndCreateDB.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            rdbImportAndCreateDBActionPerformed(evt);
         }
      });

      cmbDbHome.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmbDbHomeActionPerformed(evt);
         }
      });

      lblDbHome.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel32.class, "ImportNewVisualPanel32.lblDbHome.text")); // NOI18N

      lblDbName.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel32.class, "ImportNewVisualPanel32.lblDbName.text")); // NOI18N

      txtDbName.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel32.class, "ImportNewVisualPanel32.txtDbName.text")); // NOI18N

      lblFST.setText(NbBundle.getMessage(ImportVisualPanel2.class, "ImportNewVisualPanel32.lblFST.text")); // NOI18N

      lblFDT.setText(NbBundle.getMessage(ImportVisualPanel2.class, "ImportNewVisualPanel32.lblFDT.text")); // NOI18N

      impFST.setEnabled(false);

      impFDT.setEnabled(false);

      btnFDTBrowse.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel32.class, "ImportNewVisualPanel32.btnFDTBrowse.text")); // NOI18N
      btnFDTBrowse.setEnabled(false);
      btnFDTBrowse.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnFDTBrowseActionPerformed(evt);
         }
      });

      btnFSTBrowse.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel32.class, "ImportNewVisualPanel32.btnFSTBrowse.text")); // NOI18N
      btnFSTBrowse.setEnabled(false);
      btnFSTBrowse.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnFSTBrowseActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(rdbImportAndCreateDB)
                  .addContainerGap())
               .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(layout.createSequentialGroup()
                     .addGap(23, 23, 23)
                     .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblDbHome)
                        .addComponent(lblDbName))
                     .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                     .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtDbName, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                        .addComponent(cmbDbHome, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGap(99, 99, 99))
                  .addGroup(layout.createSequentialGroup()
                     .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                     .addContainerGap())
                  .addGroup(layout.createSequentialGroup()
                     .addComponent(rdbCreateDbFromFDT, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                     .addGap(118, 118, 118))
                  .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                     .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblFST)
                        .addComponent(lblFDT))
                     .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                     .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(impFST)
                        .addComponent(impFDT, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE))
                     .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                     .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnFDTBrowse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnFSTBrowse))
                     .addContainerGap()))))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(cmbDbHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(lblDbHome))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(txtDbName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(lblDbName))
            .addGap(27, 27, 27)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(rdbImportAndCreateDB)
            .addGap(9, 9, 9)
            .addComponent(rdbCreateDbFromFDT)
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(impFDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(btnFDTBrowse)
               .addComponent(lblFDT))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(impFST, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(btnFSTBrowse)
               .addComponent(lblFST))
            .addContainerGap(121, Short.MAX_VALUE))
      );
   }// </editor-fold>//GEN-END:initComponents

    private void rdbCreateDbFromFDTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbCreateDbFromFDTActionPerformed
       createDbOption_ = CREATE_DB_FROM_FDT;
       impFST.setEnabled(true);
       impFDT.setEnabled(true);
       btnFDTBrowse.setEnabled(true);
       btnFSTBrowse.setEnabled(true);
       wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed
}//GEN-LAST:event_rdbCreateDbFromFDTActionPerformed

    private void rdbImportAndCreateDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbImportAndCreateDBActionPerformed
       createDbOption_ = CREATE_EMPTY_DB;
       impFST.setEnabled(false);
       impFDT.setEnabled(false);
       btnFDTBrowse.setEnabled(false);
       btnFSTBrowse.setEnabled(false);
       wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed
}//GEN-LAST:event_rdbImportAndCreateDBActionPerformed

    private void btnFDTBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFDTBrowseActionPerformed
       impFDT.setText(selectFile("fdt", "ISIS FDT Files"));
       wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed
}//GEN-LAST:event_btnFDTBrowseActionPerformed

    private void btnFSTBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFSTBrowseActionPerformed
       impFST.setText(selectFile("fst", "ISIS FST Files"));
       wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed
}//GEN-LAST:event_btnFSTBrowseActionPerformed

    private void cmbDbHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDbHomeActionPerformed
       // TODO add your handling code here:
    }//GEN-LAST:event_cmbDbHomeActionPerformed


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnFDTBrowse;
   private javax.swing.JButton btnFSTBrowse;
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.JComboBox cmbDbHome;
   private javax.swing.JTextField impFDT;
   private javax.swing.JTextField impFST;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JLabel lblDbHome;
   private javax.swing.JLabel lblDbName;
   private javax.swing.JLabel lblFDT;
   private javax.swing.JLabel lblFST;
   private javax.swing.JRadioButton rdbCreateDbFromFDT;
   private javax.swing.JRadioButton rdbImportAndCreateDB;
   private javax.swing.JTextField txtDbName;
   // End of variables declaration//GEN-END:variables

   private String selectFile(String ext, String description) {

       //prefs = Preferences.userNodeForPackage(this.getClass());
       String lastDir = Global.prefs_.get("IMPEXP_FDTFST_DIR", "");
       JFileChooser fc = new JFileChooser(lastDir);

       // Remove the filter that accepts all files
       FileFilter ft = fc.getAcceptAllFileFilter();
       fc.removeChoosableFileFilter(ft);

       // Add the file extension filter
       FileExtFilter filter = new FileExtFilter(ext,description);
       fc.addChoosableFileFilter(filter);

        fc.showOpenDialog(this);
        File file;
        if ((file=fc.getSelectedFile())!= null) {
           Global.prefs_.put("IMPEXP_FDTFST_DIR", file.getAbsolutePath());
            return file.getAbsolutePath();
        }
        return "";
    }

   public void insertUpdate(DocumentEvent evt) {
      updateTexts( evt );
   }

   public void removeUpdate(DocumentEvent evt) {
      updateTexts( evt );
   }

   public void changedUpdate(DocumentEvent evt) {
      updateTexts( evt );
   }

    private void updateTexts( DocumentEvent evt ) {

        Document doc = evt.getDocument();

        if ( doc == txtDbName.getDocument()) {
            wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed
        } else if (doc == impFDT.getDocument()) {
           wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed
        } else if (doc == impFST.getDocument()) {
           wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed

        }
    }

    boolean valid(WizardDescriptor wizardDescriptor) {

      
      if (getDbName().trim().equals("")) {
         wizardDescriptor.putProperty("WizardPanel_errorMessage", // NOI18N
                 NbBundle.getMessage(ImportNewVisualPanel32.class, "MSG_EmptyDbName"));
         return false;
      }
      if (createDbOption_ == CREATE_DB_FROM_FDT) {
         if (impFDT.getText().trim().equals("")) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", // NOI18N
                    NbBundle.getMessage(ImportNewVisualPanel32.class, "MSG_EmptyFDT"));
            return false;
         }
         if (impFST.getText().trim().equals("")) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", // NOI18N
                    NbBundle.getMessage(ImportNewVisualPanel32.class, "MSG_EmptyFST"));
            return false;
         }
      }



      return true;
   }

      public void fillDbHomes(String[] dbHomes) {
        cmbDbHome.setModel(new DefaultComboBoxModel(dbHomes));
        cmbDbHome.setSelectedIndex(0);
        //jList1.setModel(new DbHomesModel(dbHomes));
        cmbDbHome.updateUI();
    }
   public String getDbHome() {
      Object selObject = cmbDbHome.getSelectedItem();
      return (selObject == null ? "" : selObject.toString());
   }

   public String getDbName() {
      Object selObject = txtDbName.getText();
      return (selObject == null ? "" : selObject.toString());
   }
    public File getFDTFile() {
        return new File(impFDT.getText());
    }

    public File getFSTFile() {
        return new File(impFST.getText());
    }

    public int getCreateDbOption() {
        return createDbOption_;
    }

}
