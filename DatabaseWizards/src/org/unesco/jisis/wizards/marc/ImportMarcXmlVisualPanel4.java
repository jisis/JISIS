/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.unesco.jisis.wizards.marc;

import java.io.File;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.DocumentEvent;
import javax.swing.text.Document;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.WizardDescriptor;
import org.slf4j.LoggerFactory;
import org.unesco.jisis.corelib.client.ConnectionInfo;
import org.unesco.jisis.corelib.client.ConnectionPool;
import org.unesco.jisis.corelib.common.Global;
import org.unesco.jisis.corelib.common.IDatabase;
import org.unesco.jisis.gui.DirectoryChooser;

/**
 *
 * @author jcd
 */
public class ImportMarcXmlVisualPanel4 extends javax.swing.JPanel {
 protected ImportMarcXmlWizardPanel4 wizardDescriptor_;
   private String lastMfn_;
    private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(ImportMarcXmlVisualPanel4.class);
    private static final String NO_FST = java.util.ResourceBundle.getBundle("org/unesco/jisis/wizards/marc/Bundle").getString("NO_FST");
   /**
    * Creates new form ImportMarcXmlVisualPanel4
    */
    public ImportMarcXmlVisualPanel4(ImportMarcXmlWizardPanel4 wizardDescriptor) {
        wizardDescriptor_ = wizardDescriptor;
        initComponents();
        ConnectionInfo connectionInfo = ConnectionPool.getDefaultConnectionInfo();
        IDatabase db = connectionInfo.getDefaultDatabase();
     
        String[] cmbModel = new String[]{NO_FST};
        try {
            if (db != null) {
                String[] fstNames = db.getFstNames();
                if (fstNames != null) {
                    cmbModel = new String[fstNames.length + 1];
                    cmbModel[0] = NO_FST;
                    System.arraycopy(fstNames, 0, cmbModel, 1, fstNames.length);
                }
            }
            cmbReformattingFST.setModel(new DefaultComboBoxModel(cmbModel));
       } catch (Exception ex) {
          String msg = java.util.ResourceBundle.getBundle("org/unesco/jisis/wizards/marc/Bundle")
                  .getString("CANNOT_FIND_REFORMATTING_FSTS");
          LOGGER.error(msg, ex);
          DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message(msg,
                  NotifyDescriptor.ERROR_MESSAGE));
       }
    }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblReFmtFst = new javax.swing.JLabel();
        cmbReformattingFST = new javax.swing.JComboBox();
        lblMoveLeader = new javax.swing.JLabel();
        chkbLeaderFields = new javax.swing.JCheckBox();
        jSeparator3 = new javax.swing.JSeparator();
        lblFirstMfn = new javax.swing.JLabel();
        txtRenumberFromMFN = new javax.swing.JTextField();
        lblTagWithMfn = new javax.swing.JLabel();
        txtOutputTagMFN = new javax.swing.JTextField();

        lblReFmtFst.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblReFmtFst.setText(org.openide.util.NbBundle.getMessage(ImportMarcXmlVisualPanel4.class, "ImportMarcXmlVisualPanel4.lblReFmtFst.text")); // NOI18N

        cmbReformattingFST.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblMoveLeader.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMoveLeader.setText(org.openide.util.NbBundle.getMessage(ImportMarcXmlVisualPanel4.class, "ImportMarcXmlVisualPanel4.lblMoveLeader.text")); // NOI18N

        chkbLeaderFields.setSelected(true);
        chkbLeaderFields.setText(org.openide.util.NbBundle.getMessage(ImportMarcXmlVisualPanel4.class, "ImportMarcXmlVisualPanel4.chkbLeaderFields.text")); // NOI18N
        chkbLeaderFields.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        lblFirstMfn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblFirstMfn.setText(org.openide.util.NbBundle.getMessage(ImportMarcXmlVisualPanel4.class, "ImportMarcXmlVisualPanel4.lblFirstMfn.text")); // NOI18N

        txtRenumberFromMFN.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtRenumberFromMFN.setText(org.openide.util.NbBundle.getMessage(ImportMarcXmlVisualPanel4.class, "ImportMarcXmlVisualPanel4.txtRenumberFromMFN.text")); // NOI18N

        lblTagWithMfn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblTagWithMfn.setText(org.openide.util.NbBundle.getMessage(ImportMarcXmlVisualPanel4.class, "ImportMarcXmlVisualPanel4.lblTagWithMfn.text")); // NOI18N

        txtOutputTagMFN.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtOutputTagMFN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOutputTagMFNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lblMoveLeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkbLeaderFields, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(106, 106, 106)
                                .addComponent(lblReFmtFst)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbReformattingFST, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblFirstMfn)
                                    .addComponent(lblTagWithMfn))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtOutputTagMFN, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtRenumberFromMFN, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 290, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbReformattingFST, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblReFmtFst))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblMoveLeader)
                    .addComponent(chkbLeaderFields))
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRenumberFromMFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFirstMfn))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOutputTagMFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTagWithMfn))
                .addContainerGap(159, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(194, 194, 194)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(240, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

   private void txtOutputTagMFNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOutputTagMFNActionPerformed
      // TODO add your handling code here:
   }//GEN-LAST:event_txtOutputTagMFNActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkbLeaderFields;
    private javax.swing.JComboBox cmbReformattingFST;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblFirstMfn;
    private javax.swing.JLabel lblMoveLeader;
    private javax.swing.JLabel lblReFmtFst;
    private javax.swing.JLabel lblTagWithMfn;
    private javax.swing.JTextField txtOutputTagMFN;
    private javax.swing.JTextField txtRenumberFromMFN;
    // End of variables declaration//GEN-END:variables

 public String getReformattingFST() {
      
        String result = NO_FST;
        int index = cmbReformattingFST.getSelectedIndex();
        if (index != -1) {
            result = (String) cmbReformattingFST.getSelectedItem();
        }
        return result;
    }

   public long getRenumberFromMFN() {
      long mfn = -1;
      try {
         Long.parseLong(txtRenumberFromMFN.getText());
      } catch (NumberFormatException ex) {
         // Do nothing
         String msg = java.util.ResourceBundle.getBundle("org/unesco/jisis/wizards/marc/Bundle")
                 .getString("ERROR_CONVERTING_RENUMBER_FROM_MFN") + txtRenumberFromMFN.getText();
          LOGGER.error(msg, ex);
          DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message(msg,
                  NotifyDescriptor.ERROR_MESSAGE));
        
      }
      return mfn;
   }

   public int getInputTagMFN() {

      int outputTag = -1;
      if (!(txtOutputTagMFN.getText().trim().equals(""))) {
         try {
            outputTag = Integer.parseInt(txtOutputTagMFN.getText());
         } catch (NumberFormatException ex) {
            // Do nothing
            String msg = java.util.ResourceBundle.getBundle("org/unesco/jisis/wizards/marc/Bundle")
                    .getString("ERROR_CONVERTING_INPUT_TAG_MFN") + txtOutputTagMFN.getText();

            LOGGER.error(msg, ex);
            DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message(msg,
                    NotifyDescriptor.ERROR_MESSAGE));
         }
      }

      return outputTag;
   }
   public int getLeaderFields() {
      return (chkbLeaderFields.isSelected()) ? 1 : 0;

   }
   public void setImportOption(int dbOption) {
      if (dbOption == ImportNewVisualPanel2.IMPORT_OPTION_LOAD) {
         // Desable the "renumber from mfn" and "output tag with mfn" fields
         lblTagWithMfn.setEnabled(false);
         lblFirstMfn.setEnabled(false);
         txtRenumberFromMFN.setText(lastMfn_);
         txtRenumberFromMFN.setEnabled(false);
         txtOutputTagMFN.setEnabled(false);
         
      } else if (dbOption == ImportNewVisualPanel2.IMPORT_OPTION_MERGE) {
         lblTagWithMfn.setEnabled(false);
         lblFirstMfn.setEnabled(false);
         txtRenumberFromMFN.setText(lastMfn_);
         txtRenumberFromMFN.setEnabled(false);
         txtOutputTagMFN.setEnabled(false);
         

      } else if (dbOption == ImportNewVisualPanel2.IMPORT_OPTION_UPDATE) {
         lblTagWithMfn.setEnabled(true);
         lblFirstMfn.setEnabled(false);
         txtRenumberFromMFN.setText(lastMfn_);
         txtRenumberFromMFN.setEnabled(false);
         txtOutputTagMFN.setEnabled(true);

      }
   }

  

   public void insertUpdate(DocumentEvent evt) {
      updateTexts(evt);
   }

   public void removeUpdate(DocumentEvent evt) {
      updateTexts(evt);
   }

   public void changedUpdate(DocumentEvent evt) {
      updateTexts(evt);
   }

   private void updateTexts(DocumentEvent evt) {

      Document doc = evt.getDocument();

      if (doc == txtOutputTagMFN.getDocument()) {
         wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed
      } else if (doc == txtRenumberFromMFN.getDocument()) {
         wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed

      }
   }

   boolean valid(WizardDescriptor wizardDescriptor) {
//      int importType = (Integer) wizardDescriptor.getProperty("importType");
//      if (importType == ImportVisualPanel1.IMPORT_CREATE_DB_FROM_FDT) {
//         if (getDbName().trim().equals("")) {
//            wizardDescriptor.putProperty("WizardPanel_errorMessage", // NOI18N
//                    NbBundle.getMessage(ImportVisualPanel2.class, "MSG_EmptyDbName"));
//            return false;
//         }
//         if (impFDT.getText().trim().equals("")) {
//            wizardDescriptor.putProperty("WizardPanel_errorMessage", // NOI18N
//                    NbBundle.getMessage(ImportVisualPanel2.class, "MSG_EmptyFDT"));
//            return false;
//         }
//         if (impFST.getText().trim().equals("")) {
//            wizardDescriptor.putProperty("WizardPanel_errorMessage", // NOI18N
//                    NbBundle.getMessage(ImportVisualPanel2.class, "MSG_EmptyFST"));
//            return false;
//         }
//
//
//
//      }
      return true;
   }

   void setLastMfn(String lastMfn) {
      lastMfn_ = lastMfn;
   }
   
    private String selectDirectory() {
      //prefs = Preferences.userNodeForPackage(this.getClass());
      String lastDir = Global.getClientWorkPath();
      DirectoryChooser dc = new DirectoryChooser(new File(lastDir));
      dc.showOpenDialog(this);
      File file;
      if ((file = dc.getSelectedFile()) != null) {
         Global.prefs_.put("IMPEXP_OUTPUT_DIR", file.getAbsolutePath());
         //txtOutputDir.setText(file.getAbsolutePath());
         return file.getAbsolutePath();
      }
      return "";
   }

}
