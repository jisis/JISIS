/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportNewVisualPanel1.java
 *
 * Created on Feb 24, 2009, 1:05:35 PM
 */

package org.unesco.jisis.wizards.marc;

import java.io.File;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.openide.WizardDescriptor;
import org.openide.util.NbBundle;
import org.unesco.jisis.corelib.common.Global;
import org.unesco.jisis.jisisutils.FileExtFilter;

/**
 *
 * @author jc_dauphin
 */
public class ImportNewVisualPanel1 extends javax.swing.JPanel implements DocumentListener {

   protected int format_ = Global.FORMAT_ISO2709;
   protected ImportNewWizardPanel1 wizardDescriptor_;
   /**
    * true - Fields with tags 001-009 are control fields (Default)
    * false - Otherwise Fields with tags 001-009 should be considered as Data Fields
    */
   
   protected boolean controlFieldsOption_ = false;  

    /** Creates new form ImportNewVisualPanel1 */
    public ImportNewVisualPanel1(ImportNewWizardPanel1 wizardDescriptor) {
       wizardDescriptor_ = wizardDescriptor;
       initComponents();
       chkbControlFields.setSelected(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        txtExternalFile = new javax.swing.JTextField();
        btnSelectExternalFile = new javax.swing.JButton();
        lblExternalFile = new javax.swing.JLabel();
        lblEncoding = new javax.swing.JLabel();
        cmbEncoding = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        rdbISO2709 = new javax.swing.JRadioButton();
        rdbMARCXML = new javax.swing.JRadioButton();
        rdbMODS = new javax.swing.JRadioButton();
        rdbDUBLIN_CORE = new javax.swing.JRadioButton();
        rdbCSV = new javax.swing.JRadioButton();
        lblMarcRecordStructure = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        chkbControlFields = new javax.swing.JCheckBox();

        txtExternalFile.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel1.class, "ImportNewVisualPanel1.txtExternalFile.text")); // NOI18N

        btnSelectExternalFile.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel1.class, "ImportNewVisualPanel1.btnSelectExternalFile.text")); // NOI18N
        btnSelectExternalFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectExternalFileActionPerformed(evt);
            }
        });

        lblExternalFile.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblExternalFile.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel1.class, "ImportNewVisualPanel1.lblExternalFile.text")); // NOI18N

        lblEncoding.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblEncoding.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel1.class, "ImportNewVisualPanel1.lblEncoding.text")); // NOI18N

        cmbEncoding.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "US-ASCII", "UTF-8          Eight-bit Unicode (or UCS) Transformation Format", "UTF-16        Sixteen-bit Unicode (or UCS), byte order identified by an optional byte-order mark", "UTF-16BE     Sixteen-bit Unicode (or UCS), big-endian byte order  ", "UTF-16LE     Sixteen-bit Unicode, little-endian byte order", "MARC-8       (Used by MARC 21)", "ISO-5426     (Used by UNIMARC)", "ISO-6937     (Used by UNIMARC)", "CP850          MS-DOS Latin-1    ", "CP852          MS-DOS Latin-2", "CP437          MS-DOS United States, Australia, New Zealand, South Africa", "CP860          MS-DOS Portuguese", "CP861          MS-DOS Icelandic", "CP863          MS-DOS Canadian French", "CP865          MS-DOS Nordic", "CP866          MS-DOS Russian", "CP868          MS-DOS Pakistan", "ISO-8859-1  Latin Alphabet No. 1 ", "ISO-8859-2  Latin Alphabet No. 2 ", "ISO-8859-4  Latin Alphabet No. 4 ", "ISO-8859-5  Latin/Cyrillic Alphabet", "ISO-8859-6  Latin/Arabic Alphabet", "ISO-8859-7  Latin/Greek Alphabet (ISO-8859-7:2003) ", "ISO-8859-8  Latin/Hebrew Alphabet", "ISO-8859-9  Latin Alphabet No. 5", "ISO-8859-13 Latin Alphabet No. 7", "ISO-8859-15 Latin Alphabet No. 9", "CP1250        Windows Eastern European", "CP1251        Windows Cyrillic", "CP1252        Windows Latin-1", "CP1253        Windows Greek", "CP1254        Windows Turkish", "CP1255        Windows Hebrew", "CP1256        Windows Arabic ", "CP1257        Windows Baltic", "CP1258        Windows Vietnamese", "CP037    USA, Canada (Bilingual, French), Netherlands, Portugal, Brazil, Australia", "Cp775    PC Baltic", "CP862    PC Hebrew", "CP864    PC Arabic", "CP273    IBM Austria, Germany", "CP277    IBM Denmark, Norway", "CP278    IBM Finland, Sweden", "CP280    IBM Italy", "CP284    IBM Catalan/Spain, Spanish Latin America", "CP285    IBM United Kingdom, Ireland", "CP297    IBM France", "CP420    IBM Arabic", "CP424    IBM Hebrew", "CP838    IBM Thailand extended SBCS", "CP855    IBM Cyrillic  ", "CP857    IBM Turkish", "CP869    IBM Modern Greek", "CP870    IBM Multilingual Latin-2", "CP871    IBM Iceland", "CP918    IBM Pakistan (Urdu)  ", "CP1026  IBM Latin-5, Turkey", "CP1006  IBM AIX Pakistan (Urdu)", "CP1025  IBM Multilingual Cyrillic: Bulgaria, Bosnia, Herzegovinia, Macedonia (FYR) ", "CP1046  IBM Arabic - Windows", "CP1097  IBM Iran (Farsi)/Persian", "CP1098  IBM Iran (Farsi)/Persian (PC)", "CP1112  IBM Latvia, Lithuania", "CP1122  IBM Estonia", "CP1124  IBM AIX Ukraine ", "CP1381  IBM OS/2, DOS People's Republic of China (PRC)    ", "ISO-2022-CN  Simplified and Traditional Chinese", "ISO-2022-JP  Japanese", "ISO-2022-KR  Korean" }));
        cmbEncoding.setSelectedIndex(17);
        cmbEncoding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEncodingActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel1.class, "ImportNewVisualPanel1.jPanel1.border.title"))); // NOI18N

        buttonGroup1.add(rdbISO2709);
        rdbISO2709.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rdbISO2709.setForeground(new java.awt.Color(0, 51, 255));
        rdbISO2709.setSelected(true);
        rdbISO2709.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel1.class, "ImportNewVisualPanel1.rdbISO2709.text")); // NOI18N
        rdbISO2709.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbISO2709ActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdbMARCXML);
        rdbMARCXML.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rdbMARCXML.setForeground(new java.awt.Color(0, 51, 255));
        rdbMARCXML.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel1.class, "ImportNewVisualPanel1.rdbMARCXML.text")); // NOI18N
        rdbMARCXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbMARCXMLActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdbMODS);
        rdbMODS.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel1.class, "ImportNewVisualPanel1.rdbMODS.text")); // NOI18N
        rdbMODS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbMODSActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdbDUBLIN_CORE);
        rdbDUBLIN_CORE.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel1.class, "ImportNewVisualPanel1.rdbDUBLIN_CORE.text")); // NOI18N
        rdbDUBLIN_CORE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbDUBLIN_COREActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdbCSV);
        rdbCSV.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel1.class, "ImportNewVisualPanel1.rdbCSV.text")); // NOI18N
        rdbCSV.setEnabled(false);
        rdbCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbCSVActionPerformed(evt);
            }
        });

        lblMarcRecordStructure.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMarcRecordStructure.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel1.class, "ImportNewVisualPanel1.lblMarcRecordStructure.text")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel1.class, "ImportNewVisualPanel1.jLabel2.text")); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel1.class, "ImportNewVisualPanel1.jLabel3.text")); // NOI18N

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel1.class, "ImportNewVisualPanel1.jLabel1.text")); // NOI18N
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel4.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel1.class, "ImportNewVisualPanel1.jLabel4.text")); // NOI18N

        jLabel5.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel1.class, "ImportNewVisualPanel1.jLabel5.text")); // NOI18N

        chkbControlFields.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel1.class, "ImportNewVisualPanel1.chkbControlFields.text")); // NOI18N
        chkbControlFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkbControlFieldsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblMarcRecordStructure, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jSeparator2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(rdbCSV))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(rdbDUBLIN_CORE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(rdbMODS))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(jLabel3))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(rdbISO2709, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(rdbMARCXML))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(chkbControlFields, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 14, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblMarcRecordStructure)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdbISO2709)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkbControlFields)
                .addGap(20, 20, 20)
                .addComponent(rdbMARCXML)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(rdbDUBLIN_CORE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rdbMODS)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdbCSV)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblEncoding)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbEncoding, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblExternalFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtExternalFile, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSelectExternalFile)))))
                .addContainerGap(122, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtExternalFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblExternalFile)
                    .addComponent(btnSelectExternalFile))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbEncoding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEncoding))
                .addGap(36, 36, 36)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbEncodingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEncodingActionPerformed
       // TODO add your handling code here:
}//GEN-LAST:event_cmbEncodingActionPerformed

    private void rdbISO2709ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbISO2709ActionPerformed
       format_ = Global.FORMAT_ISO2709;
}//GEN-LAST:event_rdbISO2709ActionPerformed

    private void rdbMARCXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbMARCXMLActionPerformed
       format_ = Global.FORMAT_MARCXML;
}//GEN-LAST:event_rdbMARCXMLActionPerformed

    private void rdbMODSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbMODSActionPerformed
       format_ = Global.FORMAT_MODS;
}//GEN-LAST:event_rdbMODSActionPerformed

    private void rdbDUBLIN_COREActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbDUBLIN_COREActionPerformed
       format_ = Global.FORMAT_DUBLIN_CORE;
}//GEN-LAST:event_rdbDUBLIN_COREActionPerformed

    private void rdbCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbCSVActionPerformed
       format_ = Global.FORMAT_CSV;
}//GEN-LAST:event_rdbCSVActionPerformed

    private void btnSelectExternalFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectExternalFileActionPerformed
        txtExternalFile.setText(selectFile());// TODO add your handling code here:
        wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed
    }//GEN-LAST:event_btnSelectExternalFileActionPerformed

    private void chkbControlFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkbControlFieldsActionPerformed
        JCheckBox cb = (JCheckBox) evt.getSource();

        controlFieldsOption_ = (cb.isSelected()) ? false : true;

    }//GEN-LAST:event_chkbControlFieldsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSelectExternalFile;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox chkbControlFields;
    private javax.swing.JComboBox cmbEncoding;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblEncoding;
    private javax.swing.JLabel lblExternalFile;
    private javax.swing.JLabel lblMarcRecordStructure;
    private javax.swing.JRadioButton rdbCSV;
    private javax.swing.JRadioButton rdbDUBLIN_CORE;
    private javax.swing.JRadioButton rdbISO2709;
    private javax.swing.JRadioButton rdbMARCXML;
    private javax.swing.JRadioButton rdbMODS;
    private javax.swing.JTextField txtExternalFile;
    // End of variables declaration//GEN-END:variables
   

private String selectFile() {

       //prefs = Preferences.userNodeForPackage(this.getClass());
       String lastDir = Global.prefs_.get("IMPEXP_INPUT_DIR", "");
       JFileChooser fc = new JFileChooser(lastDir);

       // Remove the filter that accepts all files
       //FileFilter ft = fc.getAcceptAllFileFilter();
       //fc.removeChoosableFileFilter(ft);

       // Add the file extension filter
       FileExtFilter filter = new FileExtFilter("iso","ISO 2709 and MARC Files");
       filter.addExtension("mrc");
       filter.addExtension("xml");
       filter.addExtension("csv");
       fc.addChoosableFileFilter(filter);

        fc.showOpenDialog(this);
        File file;
        if ((file=fc.getSelectedFile())!= null) {
           Global.prefs_.put("IMPEXP_INPUT_DIR", file.getAbsolutePath());
            return file.getAbsolutePath();
        }
        return "";
    }

   boolean valid(WizardDescriptor wizardDescriptor) {


      if (getExternalFileName().trim().equals("")) {
         wizardDescriptor.putProperty("WizardPanel_errorMessage", // NOI18N
                 NbBundle.getMessage(ImportNewVisualPanel1.class, "MSG_EmptyExternalFileName"));
         
         return false;
      }


      return true;


   }
    public void insertUpdate(DocumentEvent evt) {
      updateTexts( evt );
   }

   public void removeUpdate(DocumentEvent evt) {
      updateTexts( evt );
   }

   public void changedUpdate(DocumentEvent evt) {
      updateTexts( evt );
   }

    private void updateTexts( DocumentEvent evt ) {

        Document doc = evt.getDocument();

        if ( doc == txtExternalFile.getDocument()) {
            wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed
        }
    }

    public String getExternalFileName() {
        return txtExternalFile.getText();
    }
    public File getImpFile() {
        return new File(txtExternalFile.getText());
    }
    /**
     * http://docs.oracle.com/javase/8/docs/technotes/guides/intl/encoding.doc.html
     * 
     * US-ASCII                    US-ASCII=US-ASCII Charset
     * CP850 (or IBM850)           IBM850=IBM850 Charset               MS-DOS Latin-1    
     * CP852 (or IBM852)           IBM852=IBM852 Charset               MS-DOS Latin-2
     * CP855 (or IBM855)           IBM855=IBM855 Charset               IBM Cyrillic  
     * CP864 Arabic  (IBM PC)      IBM864=IBM864 Charset               PC Arabic
     * CP866 (or IBM866)           IBM866=IBM866 Charset               MS-DOS Russian
     * CP1250 (or windows-1250)    windows-1250= windows-1250 Charset  Windows Eastern European
     * CP1251 (or windows-1251)    windows-1251=windows-1251 Charset   Windows Cyrillic
     * CP1252 (or windows-1252)    windows-1252=windows-1252 Charset   Windows Latin-1
     * CP1256 Windows Arabic      windows-1256=windows-1256 Charset    Windows Arabic
     * ISO-8859-1                  ISO-8859-1=ISO-8859-1 Charset
     * UTF-8                       UTF-8=UTF-8 Charset
     * UTF-16                      UTF-16=UTF-16 Charset
     * UTF-16BE                    UTF-16BE=UTF-16BE Charset
     * UTF-16LE                    UTF-16LE=UTF-16LE Charset
    
     * MARC-8 (Used by MARC 21)
     * ISO-5426 (Used by UNIMARC)
     * ISO-6937 (Used by UNIMARC)
     * @return 
     */
   public String getEncoding() {
      String encoding = (String) cmbEncoding.getSelectedItem();
//      if (encoding.startsWith("CP850")) {
//         encoding = "IBM850";                     // MS-DOS Latin-1
//      } else if (encoding.startsWith("CP852")) {
//         encoding = "IBM852";                     // MS-DOS Latin-2 
//      } else if (encoding.startsWith("CP855")) {
//         encoding = "IBM855";                     // IBM Cyrillic
//      } else if (encoding.startsWith("CP864")) {
//         encoding = "IBM864";                     // PC Arabic
//      } else if (encoding.startsWith("CP866")) {
//         encoding = "IBM866";                     // MS-DOS Russian
//      } else if (encoding.startsWith("CP1250")) {
//         encoding = "Windows-1250";               // Windows Eastern European
//      } else if (encoding.startsWith("CP1251")) {
//         encoding = "Windows-1251";               // Windows Cyrillic
//      } else if (encoding.startsWith("CP1252")) {
//         encoding = "Windows-1252";               // Windows Latin-1
//      } else if (encoding.startsWith("CP1256")) {
//         encoding = "Windows-1256";               // Windows Arabic
//      } else if (encoding.startsWith("ISO-8859-1")) {
//         encoding = "ISO-8859-1";                 // Latin Alphabet No. 1
//      } else if (encoding.startsWith("MARC-8")) {
//         encoding = "MARC-8";
//      }else if (encoding.startsWith("ISO-5426")) {
//         encoding = "ISO5426";
//      }else if (encoding.startsWith("ISO-6937")) {
//         encoding = "ISO6937";
//      }

      if (encoding.startsWith("CP037")) {
         encoding = "IBM037";        // USA, Canada (Bilingual, French), Netherlands, Portugal, Brazil, Australia             // MS-DOS Latin-1
      } else if (encoding.startsWith("CP273")) {
         encoding = "IBM273";                     // IBM Austria, Germany 
      } else if (encoding.startsWith("CP277")) {
         encoding = "IBM277";
      } else if (encoding.startsWith("CP278")) {
         encoding = "IBM278";  // IBM Finland, Sweden
      } else if (encoding.startsWith("CP280")) {
         encoding = "IBM280";  // IBM Italy
      } else if (encoding.startsWith("CP284")) {
         encoding = "IBM284";  // IBM Catalan/Spain, Spanish Latin America
      } else if (encoding.startsWith("CP285")) {
         encoding = "IBM285";  // IBM United Kingdom, Ireland
      } else if (encoding.startsWith("CP297")) {
         encoding = "IBM297";  // IBM France
      } else if (encoding.startsWith("CP420")) {
         encoding = "IBM420";  // IBM Arabic
      } else if (encoding.startsWith("CP424")) {
         encoding = "IBM424";  // IBM Hebrew
      } else if (encoding.startsWith("CP437")) {
         encoding = "IBM437";  // MS-DOS United States, Australia, New Zealand, South Africa
      } else if (encoding.startsWith("CP775")) {
         encoding = "IBM775";  // PC Baltic

      } else if (encoding.startsWith("CP838")) {
         encoding = "IBM838";  // IBM Thailand extended SBCS
      } else if (encoding.startsWith("CP850")) {
         encoding = "IBM850";  // MS-DOS Latin-1
      } else if (encoding.startsWith("CP852")) {
         encoding = "IBM852";  // MS-DOS Latin-2
      } else if (encoding.startsWith("CP855")) {
         encoding = "IBM855";  // IBM Cyrillic
      } else if (encoding.startsWith("CP857")) {
         encoding = "IBM857";  // IBM Turkish
      } else if (encoding.startsWith("CP860")) {
         encoding = "IBM860";  // MS-DOS Portuguese
      } else if (encoding.startsWith("CP861")) {
         encoding = "IBM861";  // MS-DOS Icelandic
      } else if (encoding.startsWith("CP862")) {
         encoding = "IBM862";  // PC Hebrew
      } else if (encoding.startsWith("CP863")) {
         encoding = "IBM863";  // MS-DOS Canadian French
      } else if (encoding.startsWith("CP864")) {
         encoding = "IBM864";  // PC Arabic
      } else if (encoding.startsWith("CP865")) {
         encoding = "IBM865";  // MS-DOS Nordic
      } else if (encoding.startsWith("CP866")) {
         encoding = "IBM866";  // MS-DOS Russian
      } else if (encoding.startsWith("CP868")) {
         encoding = "IBM868";  // MS-DOS Pakistan
      } else if (encoding.startsWith("CP869")) {
         encoding = "IBM869";  // IBM Modern Greek
      } else if (encoding.startsWith("CP870")) {
         encoding = "IBM870";  // IBM Multilingual Latin-2
      } else if (encoding.startsWith("CP871")) {
         encoding = "IBM871";  // IBM Iceland
      } else if (encoding.startsWith("CP918")) {
         encoding = "IBM918";  // IBM Pakistan (Urdu)
      } else if (encoding.startsWith("CP1026")) {
         encoding = "IBM1026";  // IBM Latin-5, Turkey
      } else if (encoding.startsWith("CP1006")) {
         encoding = "IBM1006";  // IBM AIX Pakistan (Urdu)
      } else if (encoding.startsWith("CP1025")) {
         encoding = "IBM1025";  // IBM Multilingual Cyrillic: Bulgaria, Bosnia, Herzegovinia, Macedonia (FYR)
      } else if (encoding.startsWith("CP1046")) {
         encoding = "IBM1046";  // IBM Arabic - Windows
      } else if (encoding.startsWith("CP1097")) {
         encoding = "IBM1097";  // IBM Iran (Farsi)/Persian
      } else if (encoding.startsWith("CP1098")) {
         encoding = "IBM1098";  // IBM Iran (Farsi)/Persian (PC)
      } else if (encoding.startsWith("CP1112")) {
         encoding = "IBM1112";  // BM Latvia, Lithuania
      } else if (encoding.startsWith("CP1122")) {
         encoding = "IBM1122";  // IBM Estonia
      } else if (encoding.startsWith("CP1124")) {
         encoding = "IBM1124";  // IBM AIX Ukraine
      } else if (encoding.startsWith("CP1381")) {
         encoding = "IBM1381";  // IBM OS/2, DOS People's Republic of China (PRC)
      } else if (encoding.startsWith("ISO-2022-CN")) {
         encoding = "ISO-2022-CN";  // Simplified and Traditional Chinese
      } else if (encoding.startsWith("ISO-2022-JP")) {
         encoding = "ISO-2022-JP";  // Japanese
      } else if (encoding.startsWith("ISO-2022-KR")) {
         encoding = "ISO-2022-KR";  // Korean
      } else if (encoding.startsWith("ISO-8859-1")) {
         encoding = "ISO-8859-1";  // Latin Alphabet No. 1
      } else if (encoding.startsWith("ISO-8859-2")) {
         encoding = "ISO-8859-2";  //  Latin Alphabet No. 2
      } else if (encoding.startsWith("ISO-8859-3")) {
         encoding = "ISO-8859-3";  // Latin Alphabet No. 1
      } else if (encoding.startsWith("ISO-8859-4")) {
         encoding = "ISO-8859-4";  // Latin Alphabet No. 4
      } else if (encoding.startsWith("ISO-8859-5")) {
         encoding = "ISO-8859-5";  // Latin/Cyrillic Alphabet
      } else if (encoding.startsWith("ISO-8859-6")) {
         encoding = "ISO-8859-6";  // Latin/Arabic Alphabet
      } else if (encoding.startsWith("ISO-8859-7")) {
         encoding = "ISO-8859-7";  // Latin/Greek Alphabet (ISO-8859-7:2003) v
      } else if (encoding.startsWith("ISO-8859-8")) {
         encoding = "ISO-8859-8";  // Latin/Hebrew Alphabet
      } else if (encoding.startsWith("ISO-8859-9")) {
         encoding = "ISO-8859-9";  // Latin Alphabet No. 5
      } else if (encoding.startsWith("ISO-8859-13")) {
         encoding = "ISO-8859-13";  // Latin Alphabet No. 7
      } else if (encoding.startsWith("ISO-8859-15")) {
         encoding = "ISO-8859-15";  // Latin Alphabet No. 9
      } else if (encoding.startsWith("UTF-8")) {
         encoding = "UTF-8";  // Eight-bit Unicode (or UCS) Transformation Format
      } else if (encoding.startsWith("UTF-16")) {
         encoding = "UTF-16";  // Sixteen-bit Unicode (or UCS), byte order identified by an optional byte-order mark
      } else if (encoding.startsWith("UTF-16BE")) {
         encoding = "UTF-16BE";  // Sixteen-bit Unicode (or UCS), big-endian byte order 
      } else if (encoding.startsWith("UTF-16LE")) {
         encoding = "UTF-16LE";  // Sixteen-bit Unicode, little-endian byte order
      } else if (encoding.startsWith("MARC-8")) {
         encoding = "MARC-8"; // (Used by MARC 21)
      } else if (encoding.startsWith("ISO-5426")) {
         encoding = "ISO5426"; // (Used by UNIMARC)
      } else if (encoding.startsWith("ISO-6937")) {
         encoding = "ISO6937"; // (Used by UNIMARC)
      } else if (encoding.startsWith("CP1250")) {
         encoding = "windows-1250"; // Windows Eastern European
      } else if (encoding.startsWith("CP1251")) {
         encoding = "windows-1251"; // Windows Cyrillic
      } else if (encoding.startsWith("CP1252")) {
         encoding = "windows-1252"; // Windows Latin-1
      } else if (encoding.startsWith("CP1253")) {
         encoding = "windows-1253"; // Windows Greek
      } else if (encoding.startsWith("CP1254")) {
         encoding = "windows-1254"; // Windows Turkish
      } else if (encoding.startsWith("CP1255")) {
         encoding = "windows-1255"; // Windows Hebrew
      } else if (encoding.startsWith("CP1256")) {
         encoding = "windows-1256"; // Windows Arabic
      } else if (encoding.startsWith("CP1257")) {
         encoding = "windows-1257"; // Windows Baltic
      } else if (encoding.startsWith("CP1258")) {
         encoding = "windows-1258"; // Windows Vietnamese
      }

      return encoding;

   }
    public int getFormat() {
       return format_;
    }

    public boolean getControlFieldsOption() {
        return controlFieldsOption_;
    } 
}
