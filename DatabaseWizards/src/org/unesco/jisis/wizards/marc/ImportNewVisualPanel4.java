/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportNewVisualPanel4.java
 *
 * Created on Feb 24, 2009, 4:22:51 PM
 */
package org.unesco.jisis.wizards.marc;

import javax.swing.DefaultComboBoxModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.openide.WizardDescriptor;
import org.openide.util.Exceptions;
import org.slf4j.LoggerFactory;
import org.unesco.jisis.corelib.client.ConnectionInfo;
import org.unesco.jisis.corelib.client.ConnectionPool;
import org.unesco.jisis.corelib.common.Global;
import org.unesco.jisis.corelib.common.IDatabase;

/**
 *
 * @author jc_dauphin
 */
public class ImportNewVisualPanel4 extends javax.swing.JPanel implements DocumentListener {

   protected ImportNewWizardPanel4 wizardDescriptor_;
   private String lastMfn_;
    private static final String NO_FST = java.util.ResourceBundle.getBundle("org/unesco/jisis/wizards/marc/Bundle").getString("NONE");
    private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(ImportNewVisualPanel4.class);

   /** Creates new form ImportNewVisualPanel4 */
    public ImportNewVisualPanel4(ImportNewWizardPanel4 wizardDescriptor) {
        wizardDescriptor_ = wizardDescriptor;
        initComponents();
        cmbSubfieldDelimiter.setModel(new DefaultComboBoxModel(Global.ascii));
        cmbSubfieldDelimiter.setSelectedItem("031 1F   US    (Unit Separator)");
        ConnectionInfo connectionInfo = ConnectionPool.getDefaultConnectionInfo();
        IDatabase db = connectionInfo.getDefaultDatabase();
        String[] cmbFstModel = new String[]{NO_FST}; 
        try {
            if (db != null) {
                String[] fstNames = db.getFstNames();
                if (fstNames != null) {
                    cmbFstModel = new String[fstNames.length + 1];
                    cmbFstModel[0] = "NO_FST";
                    System.arraycopy(fstNames, 0, cmbFstModel, 1, fstNames.length);
                }
            }
            cmbReformattingFST.setModel(new DefaultComboBoxModel(cmbFstModel));
            
          
        } catch (Exception ex) {
             LOGGER.error("Cannot find reformatting FSTs", ex);
        }
       

    }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        lblFirstMfn = new javax.swing.JLabel();
        lblTagWithMfn = new javax.swing.JLabel();
        txtRenumberFromMFN = new javax.swing.JTextField();
        txtOutputTagMFN = new javax.swing.JTextField();
        lblSubfieldSeparator = new javax.swing.JLabel();
        lblInputLineLength = new javax.swing.JLabel();
        lblReFmtFst = new javax.swing.JLabel();
        txtInputLineLength = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cmbReformattingFST = new javax.swing.JComboBox();
        cmbSubfieldDelimiter = new javax.swing.JComboBox();
        chkbLeaderFields = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        lblFirstMfn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblFirstMfn.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel4.class, "ImportNewVisualPanel4.lblFirstMfn.text")); // NOI18N

        lblTagWithMfn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblTagWithMfn.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel4.class, "ImportNewVisualPanel4.lblTagWithMfn.text")); // NOI18N

        txtRenumberFromMFN.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtRenumberFromMFN.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel4.class, "ImportNewVisualPanel4.txtRenumberFromMFN.text")); // NOI18N

        txtOutputTagMFN.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtOutputTagMFN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOutputTagMFNActionPerformed(evt);
            }
        });

        lblSubfieldSeparator.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblSubfieldSeparator.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel4.class, "ImportNewVisualPanel4.lblSubfieldSeparator.text")); // NOI18N

        lblInputLineLength.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblInputLineLength.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel4.class, "ImportNewVisualPanel4.lblInputLineLength.text")); // NOI18N

        lblReFmtFst.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblReFmtFst.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel4.class, "ImportNewVisualPanel4.lblReFmtFst.text")); // NOI18N

        txtInputLineLength.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtInputLineLength.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel4.class, "ImportNewVisualPanel4.txtInputLineLength.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel4.class, "ImportNewVisualPanel4.jLabel2.text")); // NOI18N

        cmbReformattingFST.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSubfieldDelimiter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        chkbLeaderFields.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel4.class, "ImportNewVisualPanel4.chkbLeaderFields.text")); // NOI18N
        chkbLeaderFields.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText(org.openide.util.NbBundle.getMessage(ImportNewVisualPanel4.class, "ImportNewVisualPanel4.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFirstMfn, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblTagWithMfn, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtRenumberFromMFN, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtOutputTagMFN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 617, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblInputLineLength, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblSubfieldSeparator, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblReFmtFst, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtInputLineLength, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel2))
                                            .addComponent(cmbSubfieldDelimiter, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cmbReformattingFST, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(chkbLeaderFields, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInputLineLength)
                    .addComponent(txtInputLineLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSubfieldSeparator)
                    .addComponent(cmbSubfieldDelimiter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbReformattingFST, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblReFmtFst))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(chkbLeaderFields))
                .addGap(28, 28, 28)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRenumberFromMFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFirstMfn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOutputTagMFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTagWithMfn))
                .addContainerGap(186, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtOutputTagMFNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOutputTagMFNActionPerformed
       // TODO add your handling code here:
}//GEN-LAST:event_txtOutputTagMFNActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkbLeaderFields;
    private javax.swing.JComboBox cmbReformattingFST;
    private javax.swing.JComboBox cmbSubfieldDelimiter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblFirstMfn;
    private javax.swing.JLabel lblInputLineLength;
    private javax.swing.JLabel lblReFmtFst;
    private javax.swing.JLabel lblSubfieldSeparator;
    private javax.swing.JLabel lblTagWithMfn;
    private javax.swing.JTextField txtInputLineLength;
    private javax.swing.JTextField txtOutputTagMFN;
    private javax.swing.JTextField txtRenumberFromMFN;
    // End of variables declaration//GEN-END:variables

   public int getInputLineLength() {
      int lineLength = 80;
      try {
         lineLength = Integer.parseInt(txtInputLineLength.getText());
      } catch (NumberFormatException ex) {
         // Do nothing
         System.out.println("Error converting Input Line Length:" + txtInputLineLength.getText());
      }
      return lineLength;
   }

    public int getLeaderFields() {
      return (chkbLeaderFields.isSelected()) ? 1 : 0;

   }

   public int getSubfieldDelimiter() {
      int subfieldDelimiter = (int) ('^'); // Default ISIS caret circomflex
      String s = (String) cmbSubfieldDelimiter.getSelectedItem();
      try {
         subfieldDelimiter = Integer.parseInt(s.substring(0, 3));
      } catch (NumberFormatException ex) {
         // Do nothing
         System.out.println("Error converting Input subfield delimiter:" + s);
      }

      return subfieldDelimiter;
   }

    public String getReformattingFST() {

        String result = NO_FST;
        int index = cmbReformattingFST.getSelectedIndex();
        if (index != -1) {
            result = (String) cmbReformattingFST.getSelectedItem();
        }
        return result;
    }

    

   public long getRenumberFromMFN() {
      long mfn = -1;
      try {
         Long.parseLong(txtRenumberFromMFN.getText());
      } catch (NumberFormatException ex) {
         // Do nothing
         System.out.println("Error converting Renumber From MFN:" + txtRenumberFromMFN.getText());
      }
      return mfn;
   }

   public int getInputTagMFN() {

      int outputTag = -1;
      if (!(txtOutputTagMFN.getText().trim().equals(""))) {
         try {
            outputTag = Integer.parseInt(txtOutputTagMFN.getText());
         } catch (NumberFormatException ex) {
            // Do nothing
            System.out.println("Error converting Input Tag MFN:" + txtOutputTagMFN.getText());
         }
      }

      return outputTag;
   }
   public void setImportOption(int dbOption) {
      if (dbOption == ImportNewVisualPanel2.IMPORT_OPTION_LOAD) {
         // Desable the "renumber from mfn" and "output tag with mfn" fields
         lblTagWithMfn.setEnabled(false);
         lblFirstMfn.setEnabled(false);
         txtRenumberFromMFN.setText(lastMfn_);
         txtRenumberFromMFN.setEnabled(false);
         txtOutputTagMFN.setEnabled(false);
         
      } else if (dbOption == ImportNewVisualPanel2.IMPORT_OPTION_MERGE) {
         lblTagWithMfn.setEnabled(false);
         lblFirstMfn.setEnabled(false);
         txtRenumberFromMFN.setText(lastMfn_);
         txtRenumberFromMFN.setEnabled(false);
         txtOutputTagMFN.setEnabled(false);
         

      } else if (dbOption == ImportNewVisualPanel2.IMPORT_OPTION_UPDATE) {
         lblTagWithMfn.setEnabled(true);
         lblFirstMfn.setEnabled(false);
         txtRenumberFromMFN.setText(lastMfn_);
         txtRenumberFromMFN.setEnabled(false);
         txtOutputTagMFN.setEnabled(true);

      }
   }

  

   public void insertUpdate(DocumentEvent evt) {
      updateTexts(evt);
   }

   public void removeUpdate(DocumentEvent evt) {
      updateTexts(evt);
   }

   public void changedUpdate(DocumentEvent evt) {
      updateTexts(evt);
   }

   private void updateTexts(DocumentEvent evt) {

      Document doc = evt.getDocument();

      if (doc == txtInputLineLength.getDocument()) {
         wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed
      } else if (doc == txtOutputTagMFN.getDocument()) {
         wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed
      } else if (doc == txtRenumberFromMFN.getDocument()) {
         wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed

      }
   }

   boolean valid(WizardDescriptor wizardDescriptor) {
//      int importType = (Integer) wizardDescriptor.getProperty("importType");
//      if (importType == ImportVisualPanel1.IMPORT_CREATE_DB_FROM_FDT) {
//         if (getDbName().trim().equals("")) {
//            wizardDescriptor.putProperty("WizardPanel_errorMessage", // NOI18N
//                    NbBundle.getMessage(ImportVisualPanel2.class, "MSG_EmptyDbName"));
//            return false;
//         }
//         if (impFDT.getText().trim().equals("")) {
//            wizardDescriptor.putProperty("WizardPanel_errorMessage", // NOI18N
//                    NbBundle.getMessage(ImportVisualPanel2.class, "MSG_EmptyFDT"));
//            return false;
//         }
//         if (impFST.getText().trim().equals("")) {
//            wizardDescriptor.putProperty("WizardPanel_errorMessage", // NOI18N
//                    NbBundle.getMessage(ImportVisualPanel2.class, "MSG_EmptyFST"));
//            return false;
//         }
//
//
//
//      }
      return true;
   }

   void setLastMfn(String lastMfn) {
      lastMfn_ = lastMfn;
   }
}
