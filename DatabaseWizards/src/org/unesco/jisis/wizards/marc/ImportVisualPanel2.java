/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.unesco.jisis.wizards.marc;

import java.io.File;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.Document;
import org.openide.WizardDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.unesco.jisis.corelib.client.ConnectionInfo;

import org.unesco.jisis.corelib.client.ConnectionPool;
import org.unesco.jisis.corelib.common.Global;
import org.unesco.jisis.corelib.common.IConnection;
import org.unesco.jisis.corelib.common.IDatabase;
import org.unesco.jisis.corelib.exceptions.DbException;
import org.unesco.jisis.importexport.ImportException;

import org.unesco.jisis.jisisutils.FileExtFilter;


public final class ImportVisualPanel2 extends JPanel implements DocumentListener {

   private ImportWizardPanel2 wizardDescriptor_;

    /** Creates new form ImportVisualPanel2 */
    public ImportVisualPanel2(ImportWizardPanel2 wizardDescriptor) {
       wizardDescriptor_ = wizardDescriptor;
        initComponents();

        cmbSubfieldDelimiter.setModel(new DefaultComboBoxModel(Global.ascii));
        cmbSubfieldDelimiter.setSelectedItem("094 5E   ^    (caret circumflex)");
        
        ConnectionInfo connectionInfo = ConnectionPool.getDefaultConnectionInfo();
        IDatabase db = connectionInfo.getDefaultDatabase();
       try {
           cmbReformattingFST.setModel(new DefaultComboBoxModel(db.getFstNames()));
       } catch (Exception ex) {
           Exceptions.printStackTrace(ex);
       }

        txtDBName.getDocument().addDocumentListener(this);
        impFDT.getDocument().addDocumentListener(this);
        impFST.getDocument().addDocumentListener(this);
        impFileName.getDocument().addDocumentListener(this);

    }

    @Override
    public String getName() {
        return "Import ISO File";
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      buttonGroup1 = new javax.swing.ButtonGroup();
      jSeparator3 = new javax.swing.JSeparator();
      jSeparator1 = new javax.swing.JSeparator();
      lblDBName = new javax.swing.JLabel();
      txtDBName = new javax.swing.JTextField();
      lblDBHome = new javax.swing.JLabel();
      cmbDBHome = new javax.swing.JComboBox();
      lblSubfieldSeparator = new javax.swing.JLabel();
      lblFirstMfn = new javax.swing.JLabel();
      lblTagWithMfn = new javax.swing.JLabel();
      lblReFmtFst = new javax.swing.JLabel();
      lblInputLineLength = new javax.swing.JLabel();
      txtInputLineLength = new javax.swing.JTextField();
      txtRenumberFromMFN = new javax.swing.JTextField();
      txtOutputTagMFN = new javax.swing.JTextField();
      jSeparator2 = new javax.swing.JSeparator();
      jLabel1 = new javax.swing.JLabel();
      lblData = new javax.swing.JLabel();
      impFileName = new javax.swing.JTextField();
      btnIsoBrowse = new javax.swing.JButton();
      comboEncoding = new javax.swing.JComboBox();
      lblOption = new javax.swing.JLabel();
      rdbMerge = new javax.swing.JRadioButton();
      rdbLoad = new javax.swing.JRadioButton();
      rdbUpdate = new javax.swing.JRadioButton();
      lblFST = new javax.swing.JLabel();
      lblFDT = new javax.swing.JLabel();
      impFST = new javax.swing.JTextField();
      impFDT = new javax.swing.JTextField();
      btnFDTBrowse = new javax.swing.JButton();
      btnFSTBrowse = new javax.swing.JButton();
      cmbSubfieldDelimiter = new javax.swing.JComboBox();
      cmbReformattingFST = new javax.swing.JComboBox();
      jLabel2 = new javax.swing.JLabel();

      org.openide.awt.Mnemonics.setLocalizedText(lblDBName, org.openide.util.NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.lblDBName.text")); // NOI18N

      txtDBName.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtDBNameActionPerformed(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(lblDBHome, org.openide.util.NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.lblDBHome.text")); // NOI18N

      cmbDBHome.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "dummy" }));

      lblSubfieldSeparator.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(lblSubfieldSeparator, org.openide.util.NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.lblSubfieldSeparator.text")); // NOI18N

      org.openide.awt.Mnemonics.setLocalizedText(lblFirstMfn, org.openide.util.NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.lblFirstMfn.text")); // NOI18N

      org.openide.awt.Mnemonics.setLocalizedText(lblTagWithMfn, org.openide.util.NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.lblTagWithMfn.text")); // NOI18N

      lblReFmtFst.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(lblReFmtFst, org.openide.util.NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.lblReFmtFst.text")); // NOI18N

      lblInputLineLength.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(lblInputLineLength, org.openide.util.NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.lblInputLineLength.text")); // NOI18N

      txtInputLineLength.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
      txtInputLineLength.setText(org.openide.util.NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.txtInputLineLength.text")); // NOI18N

      txtRenumberFromMFN.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
      txtRenumberFromMFN.setText(org.openide.util.NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.txtRenumberFromMFN.text")); // NOI18N

      txtOutputTagMFN.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
      txtOutputTagMFN.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtOutputTagMFNActionPerformed(evt);
         }
      });

      jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.jLabel1.text")); // NOI18N

      lblData.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(lblData, NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.lblData.text")); // NOI18N

      org.openide.awt.Mnemonics.setLocalizedText(btnIsoBrowse, NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.btnIsoBrowse.text")); // NOI18N
      btnIsoBrowse.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnIsoBrowseActionPerformed(evt);
         }
      });

      comboEncoding.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "US-ASCII", "CP850 (or IBM850)", "ISO-8859-1", "UTF-8", "UTF-16", "UTF-16BE", "UTF-16LE", " " }));
      comboEncoding.setSelectedIndex(1);
      comboEncoding.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            comboEncodingActionPerformed(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(lblOption, org.openide.util.NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.lblOption.text")); // NOI18N

      buttonGroup1.add(rdbMerge);
      rdbMerge.setSelected(true);
      org.openide.awt.Mnemonics.setLocalizedText(rdbMerge, org.openide.util.NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.rdbMerge.text")); // NOI18N

      buttonGroup1.add(rdbLoad);
      org.openide.awt.Mnemonics.setLocalizedText(rdbLoad, org.openide.util.NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.rdbLoad.text")); // NOI18N

      buttonGroup1.add(rdbUpdate);
      org.openide.awt.Mnemonics.setLocalizedText(rdbUpdate, org.openide.util.NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.rdbUpdate.text")); // NOI18N

      org.openide.awt.Mnemonics.setLocalizedText(lblFST, NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.lblFST.text")); // NOI18N

      org.openide.awt.Mnemonics.setLocalizedText(lblFDT, NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.lblFDT.text")); // NOI18N

      org.openide.awt.Mnemonics.setLocalizedText(btnFDTBrowse, org.openide.util.NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.btnFDTBrowse.text")); // NOI18N
      btnFDTBrowse.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnFDTBrowseActionPerformed(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(btnFSTBrowse, org.openide.util.NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.btnFSTBrowse.text")); // NOI18N
      btnFSTBrowse.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnFSTBrowseActionPerformed(evt);
         }
      });

      cmbSubfieldDelimiter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

      cmbReformattingFST.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

      org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ImportVisualPanel2.class, "ImportVisualPanel2.jLabel2.text")); // NOI18N

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
                  .addContainerGap())
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
                  .addContainerGap())
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
                  .addContainerGap())
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lblDBName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDBName))
                     .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lblDBHome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbDBHome, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                  .addGap(380, 380, 380))
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(lblFirstMfn)
                     .addComponent(lblTagWithMfn))
                  .addGap(23, 23, 23)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addComponent(txtRenumberFromMFN, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(txtOutputTagMFN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addContainerGap(398, Short.MAX_VALUE))
               .addGroup(layout.createSequentialGroup()
                  .addComponent(lblOption)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(rdbMerge)
                  .addGap(6, 6, 6)
                  .addComponent(rdbLoad)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(rdbUpdate)
                  .addContainerGap(404, Short.MAX_VALUE))
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(lblFST)
                     .addComponent(lblFDT))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(impFST, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                     .addComponent(impFDT, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addComponent(btnFDTBrowse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(btnFSTBrowse))
                  .addContainerGap())
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(lblSubfieldSeparator)
                     .addComponent(lblInputLineLength)
                     .addComponent(lblData)
                     .addComponent(jLabel1)
                     .addComponent(lblReFmtFst))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(impFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnIsoBrowse))
                     .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                           .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                              .addComponent(txtInputLineLength, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addGap(18, 18, 18)
                              .addComponent(jLabel2))
                           .addComponent(comboEncoding, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(241, 241, 241))
                     .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(cmbReformattingFST, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbSubfieldDelimiter, javax.swing.GroupLayout.Alignment.LEADING, 0, 179, Short.MAX_VALUE)))
                  .addContainerGap())))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(lblDBHome)
               .addComponent(cmbDBHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(lblDBName)
               .addComponent(txtDBName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(5, 5, 5)
                  .addComponent(lblFDT))
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(impFDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(btnFDTBrowse))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(impFST, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(btnFSTBrowse)
                     .addComponent(lblFST))))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(btnIsoBrowse)
               .addComponent(impFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(lblData))
            .addGap(12, 12, 12)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel1)
               .addComponent(comboEncoding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(lblInputLineLength)
               .addComponent(txtInputLineLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(lblSubfieldSeparator)
               .addComponent(cmbSubfieldDelimiter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(lblReFmtFst)
               .addComponent(cmbReformattingFST, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(14, 14, 14)
            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(12, 12, 12)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(rdbMerge)
               .addComponent(rdbLoad)
               .addComponent(rdbUpdate)
               .addComponent(lblOption))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(lblFirstMfn)
               .addComponent(txtRenumberFromMFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(lblTagWithMfn)
               .addComponent(txtOutputTagMFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(40, 40, 40))
      );
   }// </editor-fold>//GEN-END:initComponents

   private void txtOutputTagMFNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOutputTagMFNActionPerformed
      // TODO add your handling code here:
}//GEN-LAST:event_txtOutputTagMFNActionPerformed

   private void btnIsoBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIsoBrowseActionPerformed
      impFileName.setText(selectFile("iso", "ISO2709 files"));
}//GEN-LAST:event_btnIsoBrowseActionPerformed

   private void comboEncodingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboEncodingActionPerformed
      // TODO add your handling code here:
}//GEN-LAST:event_comboEncodingActionPerformed

   private void btnFDTBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFDTBrowseActionPerformed
      impFDT.setText(selectFile("fdt", "ISIS FDT Files"));
}//GEN-LAST:event_btnFDTBrowseActionPerformed

   private void btnFSTBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFSTBrowseActionPerformed
      impFST.setText(selectFile("fst", "ISIS FST Files"));
}//GEN-LAST:event_btnFSTBrowseActionPerformed

   private void txtDBNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDBNameActionPerformed
      // TODO add your handling code here:
   }//GEN-LAST:event_txtDBNameActionPerformed


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnFDTBrowse;
   private javax.swing.JButton btnFSTBrowse;
   private javax.swing.JButton btnIsoBrowse;
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.JComboBox cmbDBHome;
   private javax.swing.JComboBox cmbReformattingFST;
   private javax.swing.JComboBox cmbSubfieldDelimiter;
   private javax.swing.JComboBox comboEncoding;
   private javax.swing.JTextField impFDT;
   private javax.swing.JTextField impFST;
   private javax.swing.JTextField impFileName;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JSeparator jSeparator2;
   private javax.swing.JSeparator jSeparator3;
   private javax.swing.JLabel lblDBHome;
   private javax.swing.JLabel lblDBName;
   private javax.swing.JLabel lblData;
   private javax.swing.JLabel lblFDT;
   private javax.swing.JLabel lblFST;
   private javax.swing.JLabel lblFirstMfn;
   private javax.swing.JLabel lblInputLineLength;
   private javax.swing.JLabel lblOption;
   private javax.swing.JLabel lblReFmtFst;
   private javax.swing.JLabel lblSubfieldSeparator;
   private javax.swing.JLabel lblTagWithMfn;
   private javax.swing.JRadioButton rdbLoad;
   private javax.swing.JRadioButton rdbMerge;
   private javax.swing.JRadioButton rdbUpdate;
   private javax.swing.JTextField txtDBName;
   private javax.swing.JTextField txtInputLineLength;
   private javax.swing.JTextField txtOutputTagMFN;
   private javax.swing.JTextField txtRenumberFromMFN;
   // End of variables declaration//GEN-END:variables
 private String selectFile(String ext, String description) {

       //prefs = Preferences.userNodeForPackage(this.getClass());
       String lastDir = Global.prefs_.get("IMPEXP_INPUT_DIR", "");
       JFileChooser fc = new JFileChooser(lastDir);

       // Remove the filter that accepts all files
       FileFilter ft = fc.getAcceptAllFileFilter();
       fc.removeChoosableFileFilter(ft);

       // Add the file extension filter
       FileExtFilter filter = new FileExtFilter(ext,description);
       fc.addChoosableFileFilter(filter);

        fc.showOpenDialog(this);
        File file;
        if ((file=fc.getSelectedFile())!= null) {
           Global.prefs_.put("IMPEXP_INPUT_DIR", file.getAbsolutePath());
            return file.getAbsolutePath();
        }
        return "";
    }


   boolean valid(WizardDescriptor wizardDescriptor) {
      int importType = (Integer) wizardDescriptor.getProperty("importType");
      if (importType == ImportVisualPanel1.IMPORT_CREATE_DB_FROM_FDT) {
         if (getDBName().trim().equals("")) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", // NOI18N
                    NbBundle.getMessage(ImportVisualPanel2.class, "MSG_EmptyDbName"));
            return false;
         }
         if (impFDT.getText().trim().equals("")) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", // NOI18N
                    NbBundle.getMessage(ImportVisualPanel2.class, "MSG_EmptyFDT"));
            return false;
         }
         if (impFST.getText().trim().equals("")) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", // NOI18N
                    NbBundle.getMessage(ImportVisualPanel2.class, "MSG_EmptyFST"));
            return false;
         }


         return true;
      } else if (importType == ImportVisualPanel1.IMPORT_IN_EXISTING_DB) {
         if (impFileName.getText().trim().equals("")) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", // NOI18N
                    NbBundle.getMessage(ImportVisualPanel2.class, "MSG_EmptyIsoName"));
            return false;
         }
         return true;
      } else {
          if (getDBName().trim().equals("")) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", // NOI18N
                    NbBundle.getMessage(ImportVisualPanel2.class, "MSG_EmptyDbName"));
            return false;
         }
         return true;
      }

   }



 public File getImpFile() {
        return new File(impFileName.getText());
    }

    public File getFDTFile() {
        return new File(impFDT.getText());
    }

    public File getFSTFile() {
        return new File(impFST.getText());
    }

    void setIsNewDB(int importType) throws ImportException {

       boolean createDb = (importType==ImportVisualPanel1.IMPORT_CREATE_DB_FROM_FDT) 
               || (importType==ImportVisualPanel1.IMPORT_CREATE_EMPTY_DB)
               ? true : false;
       boolean createDbFromFdt  = (importType==ImportVisualPanel1.IMPORT_CREATE_DB_FROM_FDT)
                ? true : false;
        lblDBHome.setEnabled(createDb);
        cmbDBHome.setEnabled(createDb);

        lblDBName.setEnabled(createDb);
        txtDBName.setEnabled(createDb);


       if (createDb) {
          try {
             IConnection conn = ConnectionPool.getDefaultConnection();
             cmbDBHome.setModel(new DefaultComboBoxModel(conn.getDbHomes()));
          } catch (DbException ex) {
             throw new ImportException(ex);
          } catch (Exception ex) {
             ex.printStackTrace();
          }
       } else {
           // Import in an existing DB
            ConnectionInfo connectionInfo = ConnectionPool.getDefaultConnectionInfo();
       
          if (!connectionInfo.ensureDefaultDatabase()) {
             return;
          }
          try {
             /* Get the default DB name in which the import will be done */
             IDatabase db = connectionInfo.getDefaultDatabase();
             txtDBName.setText(db.getDbName());
          } catch (Exception ex) {
             Exceptions.printStackTrace(ex);
          }
        }

        lblFDT.setEnabled(createDb);
        lblFST.setEnabled(createDb);

        impFDT.setEnabled(createDbFromFdt);
        impFST.setEnabled(createDbFromFdt);

        btnFDTBrowse.setEnabled(createDbFromFdt);
        btnFSTBrowse.setEnabled(createDbFromFdt);

        impFileName.setEnabled(!createDb);
        btnIsoBrowse.setEnabled(!createDb);
        rdbLoad.setEnabled(!createDb);
        rdbLoad.setEnabled(!createDb);
        rdbMerge.setEnabled(!createDb);
        rdbUpdate.setEnabled(!createDb);
        txtRenumberFromMFN.setEnabled(!createDb);
        txtInputLineLength.setEnabled(!createDb);
        cmbReformattingFST.setEnabled(!createDb);
        cmbSubfieldDelimiter.setEnabled(!createDb);
        txtOutputTagMFN.setEnabled(!createDb);
        comboEncoding.setEnabled(!createDb);

    }

    String getDBHome() {
        return cmbDBHome.getSelectedItem().toString();
    }

    String getDBName() {
        return txtDBName.getText();

    }

    String getEncoding() {
        String encoding = (String) comboEncoding.getSelectedItem();
        if (encoding.startsWith("CP850"))
            encoding = "IBM850";
        return encoding;

    }

    int getInputLineLength() {
       int lineLength = 80;
       try {
           lineLength = Integer.parseInt(txtInputLineLength.getText());
       } catch (NumberFormatException ex) {
         // Do nothing
          System.out.println("Error converting Input Line Length:"
                  +txtInputLineLength.getText());
       }
       return lineLength;
    }

    int getSubfieldDelimiter() {
        int subfieldDelimiter = (int) ('^'); // Default ISIS caret circomflex
        String s = (String) cmbSubfieldDelimiter.getSelectedItem();
      try {
         subfieldDelimiter = Integer.parseInt(s.substring(0,3));
      } catch (NumberFormatException ex) {
         // Do nothing
         System.out.println("Error converting Input subfield delimiter:"
                  +s);
      }

      return subfieldDelimiter;
    }
     public String getReformattingFST() {
        int index = cmbReformattingFST.getSelectedIndex();
        return (String) ((index == -1) ? "" : cmbReformattingFST.getSelectedItem());
     }

    public long getRenumberFromMFN() {
      long mfn = -1;
      try {
         Long.parseLong(txtRenumberFromMFN.getText());
      } catch (NumberFormatException ex) {
         // Do nothing
         System.out.println("Error converting Renumber From MFN:"
                  +txtRenumberFromMFN.getText());
      }
      return mfn;
   }

   public int getInputTagMFN() {
      int outputTag = -1;
      try {
         outputTag = Integer.parseInt(txtOutputTagMFN.getText());
      } catch (NumberFormatException ex) {
         // Do nothing
         System.out.println("Error converting Input Tag MFN:"
                  +txtOutputTagMFN.getText());
      }

      return outputTag;
   }

    public int getImportOption() {
       if (rdbMerge.isSelected()) return Global.IMPORT_OPTION_MERGE;
       if (rdbLoad.isSelected())  return Global.IMPORT_OPTION_LOAD;
       if (rdbUpdate.isSelected())return Global.IMPORT_OPTION_UPDATE;
       return Global.IMPORT_OPTION_LOAD;
    }

   public void insertUpdate(DocumentEvent evt) {
      updateTexts( evt );


   }

   public void removeUpdate(DocumentEvent evt) {
      updateTexts( evt );

   }

   public void changedUpdate(DocumentEvent evt) {
      updateTexts( evt );

   }
   private void updateTexts( DocumentEvent evt ) {

        Document doc = evt.getDocument();

        if ( doc == txtDBName.getDocument()) {
            wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed
        } else if (doc == impFDT.getDocument()) {
           wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed
        } else if (doc == impFST.getDocument()) {
           wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed

        } else if (doc == impFileName.getDocument()) {
           wizardDescriptor_.fireChangeEvent(); // Notify that the panel changed
        }
    }

}

