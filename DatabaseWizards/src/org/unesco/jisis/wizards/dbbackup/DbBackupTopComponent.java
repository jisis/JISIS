package org.unesco.jisis.wizards.dbbackup;

import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.util.zip.ZipFile;
import javax.swing.JFileChooser;
import javax.tools.FileObject;

import org.openide.ErrorManager;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.unesco.jisis.corelib.client.Compressor;
import org.unesco.jisis.corelib.client.ConnectionPool;
import org.unesco.jisis.corelib.common.IConnection;
import org.unesco.jisis.corelib.exceptions.NoConnectionException;


/**
 * Top component which displays something.
 */
final class DbBackupTopComponent extends TopComponent {
    
    private static DbBackupTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/unesco/jisis/wizards/dbbackup/save.png";
    
    private static final String PREFERRED_ID = "DbBackupTopComponent";
    private IConnection conn;
    private DbBackupTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(DbBackupTopComponent.class, "CTL_DbBackupTopComponent"));
        setToolTipText(NbBundle.getMessage(DbBackupTopComponent.class, "HINT_DbBackupTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jLabel1 = new javax.swing.JLabel();

      setPreferredSize(new java.awt.Dimension(300, 100));

      org.openide.awt.Mnemonics.setLocalizedText(jButton1, "Backup");
      jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            BackupDatabase(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(jButton2, "Restore");
      jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            restoreDatabase(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Click the button to  backup or restore a database");

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(58, 58, 58)
                  .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(56, 56, 56)
                  .addComponent(jButton2))
               .addGroup(layout.createSequentialGroup()
                  .addGap(25, 25, 25)
                  .addComponent(jLabel1)))
            .addContainerGap(16, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(36, 36, 36)
            .addComponent(jLabel1)
            .addGap(22, 22, 22)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton1)
               .addComponent(jButton2))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
   }// </editor-fold>//GEN-END:initComponents
    
    private void restoreDatabase(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_restoreDatabase
        try {
            conn = ConnectionPool.getDefaultConnection();
            
            if(conn.getUserInfo().getIsAdmin()){
                String dirToBack = "";
                
                JFileChooser chooser = new JFileChooser();
                File currentDirectory = new File("DEF_HOME") ;
                chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                
                if (currentDirectory != null) {
                    chooser.setCurrentDirectory(currentDirectory);
                }
                
                chooser.setDialogTitle("Choose");
                
                int returnVal = chooser.showSaveDialog(null);
                ZipFile zf = null;
                String filename = "";
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    //FileObject newfile = null;
                    File file = chooser.getSelectedFile().getAbsoluteFile();
                    try {
                        filename = chooser.getSelectedFile().getCanonicalPath();
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                    System.out.println(file.getName());
                }
                Compressor c = new Compressor();
                c.unZip(filename);
                this.close();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_restoreDatabase
    
    private void BackupDatabase(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackupDatabase
        try {
            conn = ConnectionPool.getDefaultConnection();
            if(conn.getUserInfo().getIsAdmin()){
                String dirToBack = "";
                JFileChooser chooser = new JFileChooser();
                File currentDirectory = new File("DEF_HOME") ;
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                if (currentDirectory != null) {
                    chooser.setCurrentDirectory(currentDirectory);
                }
                chooser.setDialogTitle("Choose");
                int returnVal = chooser.showSaveDialog(null);
                
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    //FileObject newfile = null;
                    File toDir = chooser.getSelectedFile().getParentFile();
                    dirToBack = currentDirectory.getPath() +"/"+ chooser.getSelectedFile().getName();
                    System.out.println(dirToBack);
                }
                Compressor c = new Compressor();
                try {
                    c.zipDirectory(dirToBack, dirToBack + "_bak.zip");
                    this.close();
                } catch (IllegalArgumentException ex) {
                    ex.printStackTrace();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        } catch (Exception  ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_BackupDatabase
    
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JLabel jLabel1;
   // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized DbBackupTopComponent getDefault() {
        if (instance == null) {
            instance = new DbBackupTopComponent();
        }
        return instance;
    }
    
    /**
     * Obtain the DbBackupTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized DbBackupTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find DbBackup component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof DbBackupTopComponent) {
            return (DbBackupTopComponent)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened() {
        // TODO add custom code on component opening
    }
    
    public void componentClosed() {
        // TODO add custom code on component closing
    }
    
    /** replaces this in object stream */
    public Object writeReplace() {
        return new ResolvableHelper();
    }
    
    protected String preferredID() {
        return PREFERRED_ID;
    }
    
    public void disablejButton1() {
        jButton1.setEnabled(false);
    }
    
    
    public void disablejButton2() {
        jButton2.setEnabled(false);
    }
    
    public void enablejButton1() {
        jButton1.setEnabled(true);
    }
    
    
    public void enablejButton2() {
        jButton2.setEnabled(true);
    }
    
    final static class ResolvableHelper implements Serializable {
        private static final long serialVersionUID = 1L;
        public Object readResolve() {
            return DbBackupTopComponent.getDefault();
        }
    }
    
}
