/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.unesco.jisis.dbservercontentmanager;

import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.unesco.jisis.corelib.client.DatabasePool;
import org.unesco.jisis.corelib.common.IDatabase;
import org.unesco.jisis.jisiscore.client.ClientDatabaseProxy;
import sun.jdbc.odbc.ee.ConnectionPool;

/**
 * Top component which displays something.
 */

final class DbServerContentManagerTopComponent extends TopComponent {

    private ClientDatabaseProxy db_;

    private JPanel[] panels_ = new JPanel[7];

   private static DbServerContentManagerTopComponent instance;
   /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
   private static final String PREFERRED_ID = "DbServerContentManagerTopComponent";

 

   public DbServerContentManagerTopComponent(IDatabase db) {
      if (db instanceof ClientDatabaseProxy) {
         db_ = (ClientDatabaseProxy) db;
      } else {
         throw new RuntimeException("RecordDataBrowserTopComponent: Cannot cast DB to ClientDatabaseProxy");
      }

      /* Register this TopComponent as attached to this DB */
      db_.addWindow(this);
      initComponents();
      setName(NbBundle.getMessage(DbServerContentManagerTopComponent.class, "CTL_DbServerContentManagerTopComponent"));
      setToolTipText(NbBundle.getMessage(DbServerContentManagerTopComponent.class, "HINT_DbServerContentManagerTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));



      panels_[0] = new PanelImageManager(db_);
      panels_[1] = new PanelCssManager(db_);
      panels_[2] = new PanelStopWordManager(db_);
      panels_[3] = new PanelAnyManager(db_);
      panels_[4] = new PanelJavaScriptManager(db_);
      panels_[5] = new PanelGroovyManager(db_);
  
      String[] managers = {"Image","CSS","StopWords","Any","JavaScript","Groovy" };
      cmbContentType.setModel(new DefaultComboBoxModel(managers));

      panelEditor.add(panels_[0]);
      panels_[0].setVisible(true);

   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      buttonGroup1 = new javax.swing.ButtonGroup();
      splitPane = new javax.swing.JSplitPane();
      rightPanel = new javax.swing.JPanel();
      lblContentType = new javax.swing.JLabel();
      panelEditor = new javax.swing.JPanel();
      cmbContentType = new javax.swing.JComboBox();
      leftPanel = new javax.swing.JPanel();
      panelDbServerTasks = new javax.swing.JPanel();
      btnGetServerContent = new javax.swing.JButton();
      btnCreateServerContent = new javax.swing.JButton();
      btnDeleteServerContent = new javax.swing.JButton();
      label1 = new java.awt.Label();
      panelTreeContent = new javax.swing.JPanel();
      scrollPaneTreeContent = new javax.swing.JScrollPane();
      treeContent = new javax.swing.JTree();

      splitPane.setDividerLocation(206);

      org.openide.awt.Mnemonics.setLocalizedText(lblContentType, org.openide.util.NbBundle.getMessage(DbServerContentManagerTopComponent.class, "DbServerContentManagerTopComponent.lblContentType.text")); // NOI18N

      panelEditor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
      panelEditor.setLayout(new javax.swing.BoxLayout(panelEditor, javax.swing.BoxLayout.LINE_AXIS));

      cmbContentType.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmbContentTypeActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
      rightPanel.setLayout(rightPanelLayout);
      rightPanelLayout.setHorizontalGroup(
         rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(rightPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(panelEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
               .addGroup(rightPanelLayout.createSequentialGroup()
                  .addComponent(lblContentType)
                  .addGap(35, 35, 35)
                  .addComponent(cmbContentType, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
      );
      rightPanelLayout.setVerticalGroup(
         rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(rightPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(lblContentType)
               .addComponent(cmbContentType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(36, 36, 36)
            .addComponent(panelEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
            .addContainerGap())
      );

      splitPane.setRightComponent(rightPanel);

      panelDbServerTasks.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

      org.openide.awt.Mnemonics.setLocalizedText(btnGetServerContent, org.openide.util.NbBundle.getMessage(DbServerContentManagerTopComponent.class, "DbServerContentManagerTopComponent.btnGetServerContent.text")); // NOI18N
      btnGetServerContent.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnGetServerContentActionPerformed(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(btnCreateServerContent, org.openide.util.NbBundle.getMessage(DbServerContentManagerTopComponent.class, "DbServerContentManagerTopComponent.btnCreateServerContent.text")); // NOI18N
      btnCreateServerContent.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnCreateServerContentActionPerformed(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(btnDeleteServerContent, org.openide.util.NbBundle.getMessage(DbServerContentManagerTopComponent.class, "DbServerContentManagerTopComponent.btnDeleteServerContent.text")); // NOI18N
      btnDeleteServerContent.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnDeleteServerContentActionPerformed(evt);
         }
      });

      label1.setFont(new java.awt.Font("Dialog", 1, 12));
      label1.setForeground(new java.awt.Color(0, 0, 255));
      label1.setText(org.openide.util.NbBundle.getMessage(DbServerContentManagerTopComponent.class, "DbServerContentManagerTopComponent.label1.text")); // NOI18N

      javax.swing.GroupLayout panelDbServerTasksLayout = new javax.swing.GroupLayout(panelDbServerTasks);
      panelDbServerTasks.setLayout(panelDbServerTasksLayout);
      panelDbServerTasksLayout.setHorizontalGroup(
         panelDbServerTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(panelDbServerTasksLayout.createSequentialGroup()
            .addGap(19, 19, 19)
            .addGroup(panelDbServerTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(label1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(btnCreateServerContent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(btnGetServerContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(btnDeleteServerContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap(21, Short.MAX_VALUE))
      );
      panelDbServerTasksLayout.setVerticalGroup(
         panelDbServerTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDbServerTasksLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
            .addComponent(btnGetServerContent)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(btnCreateServerContent)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(btnDeleteServerContent)
            .addGap(18, 18, 18))
      );

      panelTreeContent.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

      scrollPaneTreeContent.setViewportView(treeContent);

      javax.swing.GroupLayout panelTreeContentLayout = new javax.swing.GroupLayout(panelTreeContent);
      panelTreeContent.setLayout(panelTreeContentLayout);
      panelTreeContentLayout.setHorizontalGroup(
         panelTreeContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTreeContentLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(scrollPaneTreeContent, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
            .addContainerGap())
      );
      panelTreeContentLayout.setVerticalGroup(
         panelTreeContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(panelTreeContentLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(scrollPaneTreeContent, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
            .addContainerGap())
      );

      javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
      leftPanel.setLayout(leftPanelLayout);
      leftPanelLayout.setHorizontalGroup(
         leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(leftPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(panelTreeContent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(panelDbServerTasks, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
      );
      leftPanelLayout.setVerticalGroup(
         leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(leftPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(panelDbServerTasks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(panelTreeContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(32, Short.MAX_VALUE))
      );

      splitPane.setLeftComponent(leftPanel);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 987, Short.MAX_VALUE)
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents

   private void cmbContentTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbContentTypeActionPerformed
     String content = (String) cmbContentType.getSelectedItem();
     if (content != null) {
        int index = cmbContentType.getSelectedIndex();
        showPanel(panels_[index]);
     }
   }//GEN-LAST:event_cmbContentTypeActionPerformed

   private void btnDeleteServerContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteServerContentActionPerformed
      // TODO add your handling code here:
}//GEN-LAST:event_btnDeleteServerContentActionPerformed

   private void btnCreateServerContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateServerContentActionPerformed
      // TODO add your handling code here:
}//GEN-LAST:event_btnCreateServerContentActionPerformed

   private void btnGetServerContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetServerContentActionPerformed
      // TODO add your handling code here:
}//GEN-LAST:event_btnGetServerContentActionPerformed

   private void showPanel(JPanel panel) {
      
         panelEditor.removeAll();
         panelEditor.add(panel);
         panel.setVisible(true);
         // Note that the call to validate is important, it replaces the call to pack
         panelEditor.validate();
         panelEditor.repaint();
      
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnCreateServerContent;
   private javax.swing.JButton btnDeleteServerContent;
   private javax.swing.JButton btnGetServerContent;
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.JComboBox cmbContentType;
   private java.awt.Label label1;
   private javax.swing.JLabel lblContentType;
   private javax.swing.JPanel leftPanel;
   private javax.swing.JPanel panelDbServerTasks;
   private javax.swing.JPanel panelEditor;
   private javax.swing.JPanel panelTreeContent;
   private javax.swing.JPanel rightPanel;
   private javax.swing.JScrollPane scrollPaneTreeContent;
   private javax.swing.JSplitPane splitPane;
   private javax.swing.JTree treeContent;
   // End of variables declaration//GEN-END:variables
   /**
    * Gets default instance. Do not use directly: reserved for *.settings files only,
    * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
    * To obtain the singleton instance, use {@link #findInstance}.
    */
   public static synchronized DbServerContentManagerTopComponent getDefault() {
      if (instance == null) {
           ConnectionInfo connectionInfo = ConnectionPool.getDefaultConnectionInfo();
         if (connectionInfo.getDefaultDatabase() != null && instance == null) {
            instance = new DbServerContentManagerTopComponent(connectionInfo.getDefaultDatabase());
         }

      }
      return instance;
   }

   /**
    * Obtain the DbServerContentManagerTopComponent instance. Never call {@link #getDefault} directly!
    */
   public static synchronized DbServerContentManagerTopComponent findInstance() {
      TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
      if (win == null) {
         Logger.getLogger(DbServerContentManagerTopComponent.class.getName()).warning(
                 "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
         return getDefault();
      }
      if (win instanceof DbServerContentManagerTopComponent) {
         return (DbServerContentManagerTopComponent) win;
      }
      Logger.getLogger(DbServerContentManagerTopComponent.class.getName()).warning(
              "There seem to be multiple components with the '" + PREFERRED_ID
              + "' ID. That is a potential source of errors and unexpected behavior.");
      return getDefault();
   }

   @Override
   public int getPersistenceType() {
      return TopComponent.PERSISTENCE_NEVER;
   }

   @Override
   public void componentOpened() {
      // TODO add custom code on component opening
   }

   @Override
   public void componentClosed() {
      // TODO add custom code on component closing
   }

  

  

   @Override
   protected String preferredID() {
      return PREFERRED_ID;
   }
}
