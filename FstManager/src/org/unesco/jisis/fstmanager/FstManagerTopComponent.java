/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.unesco.jisis.fstmanager;

import java.awt.BorderLayout;
import java.io.Serializable;
import java.text.NumberFormat;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.unesco.jisis.corelib.client.ConnectionInfo;
import org.unesco.jisis.corelib.client.ConnectionPool;
import org.unesco.jisis.corelib.common.FieldSelectionTable;
import org.unesco.jisis.corelib.common.Global;
import org.unesco.jisis.corelib.common.IDatabase;
import org.unesco.jisis.corelib.exceptions.DbException;
import org.unesco.jisis.corelib.exceptions.GeneralDatabaseException;
import org.unesco.jisis.corelib.pft.ISISFormatter;
import org.unesco.jisis.corelib.record.IRecord;
import org.unesco.jisis.corelib.util.StringUtils;
import org.unesco.jisis.jisiscore.client.ClientDatabaseProxy;
import org.unesco.jisis.jisiscore.client.GuiGlobal;
import org.unesco.jisis.jisiscore.common.FSTModelEx;
import static org.unesco.jisis.jisiscore.common.FSTModelEx.NAME_COLUMN_INDEX;

/**
 * Top component which displays something.
 */
final class FstManagerTopComponent extends TopComponent implements TableModelListener {

    private static FstManagerTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/unesco/jisis/fstmanager/fst.png";

    private static final String PREFERRED_ID = "FstManagerTopComponent";

    private ClientDatabaseProxy db_;
    private FSTVisualPanel fstVisualPanel_ = null;

    private String currentFstName_;
    private FieldSelectionTable currentFst_;
    private boolean fstChanged_ = false;

    public FstManagerTopComponent(IDatabase db) {
        if (db instanceof ClientDatabaseProxy) {
            db_ = (ClientDatabaseProxy) db;
        } else {
            throw new RuntimeException("RecordDataBrowserTopComponent: Cannot cast DB to ClientDatabaseProxy");
        }

        /* Register this TopComponent as attached to this DB */
        db_.addWindow(this);

        initComponents();
        setName(NbBundle.getMessage(FstManagerTopComponent.class, "CTL_FstManagerTopComponent"));
        setToolTipText(NbBundle.getMessage(FstManagerTopComponent.class, "HINT_FstManagerTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        try {
            selectComboBox.setModel(new DefaultComboBoxModel(db_.getFstNames()));
            fstVisualPanel_ = new FSTVisualPanel(db);
            currentFstName_ = Global.DEFAULT_FST_NAME;
            currentFst_ = db_.getFst(currentFstName_);
            displayPanel.add(fstVisualPanel_, BorderLayout.CENTER);
            selectComboBox.setSelectedItem(currentFstName_);
            this.setDisplayName("FST Manager" + " (" + db.getDbHome() + "//" + db.getDatabaseName() + ")");
        } catch (DbException ex) {
            Exceptions.printStackTrace(ex);
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
        fstChanged_ = false;
        btnSaveFST.setEnabled(fstChanged_);
        fstVisualPanel_.getFSTModel().addTableModelListener((TableModelListener) this);

//         ((FmtEditor) editorPane_).setDocumentUnchanged();
//         selectComboBox.setSelectedItem(pftName);
//         undoRedoManager_.discardAllEdits();
    }
//    private String[] getFstNames() {
//
//         String[] fstNames = db_.getFstNames();
//         String[] allFstNames = new String[fstNames.length+1];
//         //allFstNames[0] = Global.DEFAULT_FST_NAME;
//         for (int i=0; i<fstNames.length; i++) {
//            allFstNames[i+1] = fstNames[i];
//         }
//         return allFstNames;
//    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        ctrlPanel = new javax.swing.JPanel();
        lbltSelectFormat = new javax.swing.JLabel();
        selectComboBox = new javax.swing.JComboBox();
        jToolBar1 = new javax.swing.JToolBar();
        btnNewFst = new javax.swing.JButton();
        btnSaveFST = new javax.swing.JButton();
        btnDeleteFST = new javax.swing.JButton();
        toolBarApplyFST = new javax.swing.JToolBar();
        syntaxButton = new javax.swing.JButton();
        btnFirstRecord = new javax.swing.JButton();
        btnPrevRecord = new javax.swing.JButton();
        btnNextRecord = new javax.swing.JButton();
        btnLastRecord = new javax.swing.JButton();
        lblMFN = new javax.swing.JLabel();
        NumberFormat nf = NumberFormat.getIntegerInstance();
        nf.setGroupingUsed(false);
        txtMFN = new javax.swing.JFormattedTextField(nf);
        btnMfnApplyRecord = new javax.swing.JButton();
        displayPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        mainPanel.setLayout(new java.awt.BorderLayout());

        ctrlPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 255)));

        lbltSelectFormat.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(lbltSelectFormat, org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.lbltSelectFormat.text")); // NOI18N

        selectComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectComboBoxActionPerformed(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnNewFst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unesco/jisis/fstmanager/new16x16-1.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnNewFst, org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.btnNewFst.text")); // NOI18N
        btnNewFst.setToolTipText(org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.btnNewFst.toolTipText")); // NOI18N
        btnNewFst.setFocusable(false);
        btnNewFst.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNewFst.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNewFst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewFstActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNewFst);

        btnSaveFST.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unesco/jisis/fstmanager/save16x16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnSaveFST, org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.btnSaveFST.text")); // NOI18N
        btnSaveFST.setToolTipText(org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.btnSaveFST.toolTipText")); // NOI18N
        btnSaveFST.setFocusable(false);
        btnSaveFST.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSaveFST.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSaveFST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveFSTActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSaveFST);

        btnDeleteFST.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unesco/jisis/fstmanager/Delete16x16-1.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnDeleteFST, org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.btnDeleteFST.text")); // NOI18N
        btnDeleteFST.setToolTipText(org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.btnDeleteFST.toolTipText")); // NOI18N
        btnDeleteFST.setFocusable(false);
        btnDeleteFST.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDeleteFST.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDeleteFST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteFSTActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDeleteFST);

        toolBarApplyFST.setFloatable(false);
        toolBarApplyFST.setRollover(true);

        syntaxButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unesco/jisis/fstmanager/Syntax16x16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(syntaxButton, org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.syntaxButton.text")); // NOI18N
        syntaxButton.setToolTipText(org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.syntaxButton.toolTipText")); // NOI18N
        syntaxButton.setFocusable(false);
        syntaxButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        syntaxButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        syntaxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syntaxButtonActionPerformed(evt);
            }
        });
        toolBarApplyFST.add(syntaxButton);

        btnFirstRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unesco/jisis/fstmanager/first16x16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnFirstRecord, org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.btnFirstRecord.text")); // NOI18N
        btnFirstRecord.setToolTipText(org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.btnFirstRecord.toolTipText")); // NOI18N
        btnFirstRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstRecordActionPerformed(evt);
            }
        });
        toolBarApplyFST.add(btnFirstRecord);

        btnPrevRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unesco/jisis/fstmanager/prev16x16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnPrevRecord, org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.btnPrevRecord.text")); // NOI18N
        btnPrevRecord.setToolTipText(org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.btnPrevRecord.toolTipText")); // NOI18N
        btnPrevRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevRecordActionPerformed(evt);
            }
        });
        toolBarApplyFST.add(btnPrevRecord);

        btnNextRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unesco/jisis/fstmanager/next16x16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnNextRecord, org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.btnNextRecord.text")); // NOI18N
        btnNextRecord.setToolTipText(org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.btnNextRecord.toolTipText")); // NOI18N
        btnNextRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextRecordActionPerformed(evt);
            }
        });
        toolBarApplyFST.add(btnNextRecord);

        btnLastRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unesco/jisis/fstmanager/last16x16x.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnLastRecord, org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.btnLastRecord.text")); // NOI18N
        btnLastRecord.setToolTipText(org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.btnLastRecord.toolTipText")); // NOI18N
        btnLastRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastRecordActionPerformed(evt);
            }
        });
        toolBarApplyFST.add(btnLastRecord);

        lblMFN.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(lblMFN, org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.lblMFN.text")); // NOI18N
        toolBarApplyFST.add(lblMFN);

        txtMFN.setColumns(9);
        txtMFN.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        txtMFN.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMFN.setText(org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.txtMFN.text")); // NOI18N
        toolBarApplyFST.add(txtMFN);

        btnMfnApplyRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unesco/jisis/fstmanager/check16x16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnMfnApplyRecord, org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.btnMfnApplyRecord.text")); // NOI18N
        btnMfnApplyRecord.setToolTipText(org.openide.util.NbBundle.getMessage(FstManagerTopComponent.class, "FstManagerTopComponent.btnMfnApplyRecord.toolTipText")); // NOI18N
        btnMfnApplyRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMfnApplyRecordActionPerformed(evt);
            }
        });
        toolBarApplyFST.add(btnMfnApplyRecord);

        javax.swing.GroupLayout ctrlPanelLayout = new javax.swing.GroupLayout(ctrlPanel);
        ctrlPanel.setLayout(ctrlPanelLayout);
        ctrlPanelLayout.setHorizontalGroup(
            ctrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ctrlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbltSelectFormat)
                .addGap(18, 18, 18)
                .addComponent(selectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(toolBarApplyFST, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ctrlPanelLayout.setVerticalGroup(
            ctrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ctrlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ctrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbltSelectFormat)
                    .addGroup(ctrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(selectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(toolBarApplyFST, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanel.add(ctrlPanel, java.awt.BorderLayout.NORTH);

        displayPanel.setLayout(new java.awt.BorderLayout());
        mainPanel.add(displayPanel, java.awt.BorderLayout.CENTER);

        add(mainPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private boolean checkFstSaved() {

      if (fstChanged_) {
         NotifyDescriptor nd = new NotifyDescriptor.Confirmation(
                 "The Current FST was modified!\nDo you want to save it?",
                 NotifyDescriptor.YES_NO_CANCEL_OPTION,
                 NotifyDescriptor.QUESTION_MESSAGE);

         Object option = DialogDisplayer.getDefault().notify(nd);
         if (option == NotifyDescriptor.CANCEL_OPTION) {
            // Do nothing
            return false;

         } else if (option == NotifyDescriptor.YES_OPTION) {
            btnSaveFSTActionPerformed(null);
         }
      }
      return true;
   }
   private void selectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectComboBoxActionPerformed
      if (selectComboBox.getSelectedItem().toString().equals(currentFstName_)) {
         return;
      }
      checkFstSaved();

      try {

         currentFstName_ = selectComboBox.getSelectedItem().toString();
         currentFst_ = db_.getFst(currentFstName_);
         fstVisualPanel_.setFST(currentFst_);
         fstVisualPanel_.getFSTModel().addTableModelListener((TableModelListener) this);
      } catch (DbException ex) {
         Exceptions.printStackTrace(ex);
      }
      setFstChanged(false);
       
   }//GEN-LAST:event_selectComboBoxActionPerformed

   boolean fstNameExists(String name) throws Exception {
      String[] fstNames = db_.getFstNames();
        for (String fstName : fstNames) {
            if (fstName.equals(name)) {
                return true;
            }
        }
      return false;
   }
   private void btnNewFstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewFstActionPerformed

      String label = NbBundle.getMessage(FstManagerTopComponent.class, "MSG_NewFST");
      String title = NbBundle.getMessage(FstManagerTopComponent.class, "MSG_NewFstTitle");

      checkFstSaved();
      NotifyDescriptor.InputLine d =
              new NotifyDescriptor.InputLine(label, title);
      if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.OK_OPTION) {
          try {
              String fstName = d.getInputText();
              if (fstNameExists(fstName)) {
                  NotifyDescriptor nd =
                      new NotifyDescriptor.Message(NbBundle.
                          getMessage( FstManagerTopComponent.class,"FST_Name_Already_Exits"));
                  DialogDisplayer.getDefault().notify(nd);
                  return;
              }
              
              FieldSelectionTable fst = new FieldSelectionTable();
              
              try {
                  /** Save the empty FST on the server */
                  db_.saveFst(fstName, fst);
                  
                  /** Reload the list of format names from the server */
                  
                  String[] fstNames = db_.getFstNames();
                  /** Reset the model with the new list of format names */
                  selectComboBox.setModel(new DefaultComboBoxModel(fstNames));
                  selectComboBox.setSelectedItem(fstName);
                  currentFstName_ = selectComboBox.getSelectedItem().toString();
                  currentFst_     = db_.getFst(currentFstName_);
                  fstVisualPanel_.setFST(currentFst_);
                  fstVisualPanel_.getFSTModel().addTableModelListener((TableModelListener) this);
                  //editorPane_.setText(currentPft_.getFormat());
              } catch (DbException ex) {
                  new GeneralDatabaseException(ex).displayWarning();
              } catch (Exception ex) {
                  Exceptions.printStackTrace(ex);
              }
              setFstChanged(false);
          } catch (Exception ex) {
              Exceptions.printStackTrace(ex);
          }
   
      }
}//GEN-LAST:event_btnNewFstActionPerformed

   private void btnSaveFSTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveFSTActionPerformed

      try {
         currentFst_ = fstVisualPanel_.getFSTModel().getFieldSelectionTable();
         if (checkFstNames() > 0) {
              String msg = NbBundle.getMessage(FstManagerTopComponent.class,
                 "MSG_CANNOT_SAVE_FST_WITH_ERRORS");
               NotifyDescriptor nd = new NotifyDescriptor.Message(
                   msg, NotifyDescriptor.ERROR_MESSAGE);

               DialogDisplayer.getDefault().notify(nd);
              return;
         }
         db_.saveFst(currentFstName_, currentFst_);
         String msg = NbBundle.getMessage(FstManagerTopComponent.class,
                 "MSG_FstSuccessfullySaved", currentFstName_);
         GuiGlobal.output(msg);
        
      } catch (DbException ex) {
         new GeneralDatabaseException(ex).displayWarning();
      } catch (Exception ex) {
         Exceptions.printStackTrace(ex);
      }
      setFstChanged(false);
      
}//GEN-LAST:event_btnSaveFSTActionPerformed

   private void btnDeleteFSTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteFSTActionPerformed
      try {
         if (currentFstName_.equals(Global.DEFAULT_FST_NAME)) {
             NotifyDescriptor nd =
                   new NotifyDescriptor.Message(NbBundle.
                   getMessage( FstManagerTopComponent.class,"Cannot_Delete_Default_FST"));
           DialogDisplayer.getDefault().notify(nd);
           return;
         }

         db_.removeFst(currentFstName_);
         int i = selectComboBox.getSelectedIndex();
         selectComboBox.removeItemAt(i);
         selectComboBox.setSelectedItem(Global.DEFAULT_FST_NAME);
         
      } catch (DbException ex) {
         Exceptions.printStackTrace(ex);
      }
}//GEN-LAST:event_btnDeleteFSTActionPerformed

   
   private void syntaxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syntaxButtonActionPerformed

      currentFst_ = fstVisualPanel_.getFSTModel().getFieldSelectionTable();
      int entryCount = currentFst_.getEntriesCount();

      int errorCount = 0;
      for (int i = 0; i < entryCount; i++) {
         FieldSelectionTable.FstEntry entry  = currentFst_.getEntryByIndex(i);
         int                          tag    = entry.getTag();
         String                       pft    = entry.getFormat();
         int                          teq    = entry.getTechnique();

         
         String s = String.format("| %5d | %1d | %s", tag, teq, pft);
         GuiGlobal.output(s);
         try {
            
            ISISFormatter pftIL = ISISFormatter.getFormatter(pft);
            if (pftIL == null) {
                 GuiGlobal.outputErr(ISISFormatter.getParsingError());
                  errorCount++;
             } else if (pftIL.hasParsingError()) {
                 GuiGlobal.outputErr(ISISFormatter.getParsingError());
                  errorCount++;
             }
         } catch (Exception e) {
            errorCount++;
            GuiGlobal.outputErr("Errors in this FST entry!");
         }
      }
      GuiGlobal.outputErr("Number of parsing errors in the FST: "+errorCount);

   }//GEN-LAST:event_syntaxButtonActionPerformed

   private void applyFST(IRecord irec) {
      currentFst_ = fstVisualPanel_.getFSTModel().getFieldSelectionTable();
      txtMFN.setValue(irec.getMfn());
      boolean isMaster = currentFstName_.equalsIgnoreCase(Global.DEFAULT_FST_NAME);
      ApplyFst applyFst = new ApplyFst(db_, currentFst_, isMaster);
      applyFst.createDocument(irec);
     
   }
   private void btnFirstRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstRecordActionPerformed
       try {
         IRecord irec = db_.getFirst();
         applyFST(irec);
      } catch (DbException ex) {
         Exceptions.printStackTrace(ex);
      }
   }//GEN-LAST:event_btnFirstRecordActionPerformed

   private void btnNextRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextRecordActionPerformed
      try {
         IRecord irec = db_.getNext();
         if (irec == null)
            return;
         applyFST(irec);
      } catch (DbException ex) {
         Exceptions.printStackTrace(ex);
      }

   }//GEN-LAST:event_btnNextRecordActionPerformed

   private void btnPrevRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevRecordActionPerformed
      try {
         IRecord irec = db_.getPrev();
         if (irec == null)
            return;
         applyFST(irec);
      } catch (DbException ex) {
         Exceptions.printStackTrace(ex);
      }   
   }//GEN-LAST:event_btnPrevRecordActionPerformed

   private void btnLastRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastRecordActionPerformed
      try {
         IRecord irec = db_.getLast();
         if (irec == null)
            return;
         applyFST(irec);
      } catch (DbException ex) {
         Exceptions.printStackTrace(ex);
      }     
   }//GEN-LAST:event_btnLastRecordActionPerformed

   private void btnMfnApplyRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMfnApplyRecordActionPerformed

      try {
         long mfn = (Long) txtMFN.getValue();
         IRecord irec = db_.getRecordCursor(mfn);
         if (irec == null) {
             GuiGlobal.outputErr("Record with MFN "+mfn+" doesn't exist !");
             return;
         }
         applyFST(irec);
      } catch (DbException ex) {
         Exceptions.printStackTrace(ex);
      }   
}//GEN-LAST:event_btnMfnApplyRecordActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteFST;
    private javax.swing.JButton btnFirstRecord;
    private javax.swing.JButton btnLastRecord;
    private javax.swing.JButton btnMfnApplyRecord;
    private javax.swing.JButton btnNewFst;
    private javax.swing.JButton btnNextRecord;
    private javax.swing.JButton btnPrevRecord;
    private javax.swing.JButton btnSaveFST;
    private javax.swing.JPanel ctrlPanel;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblMFN;
    private javax.swing.JLabel lbltSelectFormat;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JComboBox selectComboBox;
    private javax.swing.JButton syntaxButton;
    private javax.swing.JToolBar toolBarApplyFST;
    private javax.swing.JFormattedTextField txtMFN;
    // End of variables declaration//GEN-END:variables
   /**
    * Gets default instance. Do not use directly: reserved for *.settings files only,
    * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
    * To obtain the singleton instance, use {@link #findInstance}.
    */
    public static synchronized FstManagerTopComponent getDefault() {

         if (instance != null) {
            instance.close();
            instance = null;
        }
         ConnectionInfo connectionInfo = ConnectionPool.getDefaultConnectionInfo();

        if (connectionInfo.getDefaultDatabase() != null && instance == null) {
            instance = new FstManagerTopComponent(connectionInfo.getDefaultDatabase());
        }

        return instance;
    }

   /**
    * Obtain the FstManagerTopComponent instance. Never call {@link #getDefault} directly!
    */
   public static synchronized FstManagerTopComponent findInstance() {
      TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
      if (win == null) {
         Logger.getLogger(FstManagerTopComponent.class.getName()).warning(
                 "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
         return getDefault();
      }
      if (win instanceof FstManagerTopComponent) {
         return (FstManagerTopComponent) win;
      }
      Logger.getLogger(FstManagerTopComponent.class.getName()).warning(
              "There seem to be multiple components with the '" + PREFERRED_ID +
              "' ID. That is a potential source of errors and unexpected behavior.");
      return getDefault();
   }

   @Override
   public int getPersistenceType() {
      return TopComponent.PERSISTENCE_NEVER;
   }

   @Override
   public void componentOpened() {
      // TODO add custom code on component opening
   }


   @Override
   public boolean canClose() {
      if (!checkFstSaved()) {
         return false;
      }
      return true;
   }
   
   /** replaces this in object stream */
   @Override
   public Object writeReplace() {
      return new ResolvableHelper();
   }

   @Override
   protected String preferredID() {
      return PREFERRED_ID;
   }
   private void setFstChanged(boolean changed) {
      if (changed) {
         fstChanged_ = true;
         btnSaveFST.setEnabled(fstChanged_);
//         try {
//            this.setDisplayName("FST Manager" + " (" + db_.getDatabaseName() + ")" + "*");
//         } catch (DbException ex) {
//            Exceptions.printStackTrace(ex);
//         }
      } else {
         fstChanged_ = false;
         btnSaveFST.setEnabled(fstChanged_);
//         try {
//            this.setDisplayName("FST Manager" + " (" + db_.getDatabaseName() + ")");
//         } catch (DbException ex) {
//            Exceptions.printStackTrace(ex);
//         }
      }
   }

    private int  checkFstNames() {                                             

      currentFst_ = fstVisualPanel_.getFSTModel().getFieldSelectionTable();
      int entryCount = currentFst_.getEntriesCount();

      int errorCount = 0;
      for (int i = 0; i < entryCount; i++) {
         FieldSelectionTable.FstEntry entry  = currentFst_.getEntryByIndex(i);
         String name  = entry.getName();
         if (name == null || name.equals("")) {
             continue;
         }
         if (StringUtils.isValidFstIdentifier(name)) {
             continue;
         }
         GuiGlobal.outputErr("Invalid FST Entry Name: "+name);

         errorCount++;
      }
      return errorCount;
    }
   
   /**
    * Called when the structure of or data in the table has changed.
    * @param evt - The TableModelEvent 
    * 
    *  TamodelEvent API
    * 
    * Method                Purpose
    * Object getSource()    (in java.util.EventObject)	Return the object that fired the event.
    * int getFirstRow()     Return the index of the first row that changed. TableModelEvent.HEADER_ROW specifies the table header.
    * int getLastRow()      The last row that changed. Again, HEADER_ROW is a possible value.
    * int getColumn()       Return the index of the column that changed. The constant TableModelEvent.ALL_COLUMNS 
    *                       specifies that all the columns might have changed.
    * int getType()         What happened to the changed cells. The returned value is one of the following: 
    *                       TableModelEvent.INSERT, TableModelEvent.DELETE, or TableModelEvent.UPDATE.
    */
   public void tableChanged(TableModelEvent evt) {
      FSTModelEx model = (FSTModelEx) evt.getSource();
      int row    = evt.getFirstRow();
      int column = evt.getColumn();

       if (column == NAME_COLUMN_INDEX) {

           String cellValue = String.valueOf(fstVisualPanel_.getFstTableModel()
               .getValueAt(row, column));
           if (!StringUtils.isValidFstIdentifier(cellValue)) {
               String msg = NbBundle.getMessage(FstManagerTopComponent.class, "MSG_INVALID_FST_ENTRY_NAME",cellValue);
                  
               NotifyDescriptor nd = new NotifyDescriptor.Message(
                   msg, NotifyDescriptor.ERROR_MESSAGE);

               DialogDisplayer.getDefault().notify(nd);

           }
       }
      setFstChanged(true);
   }

   final static class ResolvableHelper implements Serializable {

      private static final long serialVersionUID = 1L;

      public Object readResolve() {
         return FstManagerTopComponent.getDefault();
      }
   }
}
