package org.unesco.jisis.datadefinition.fdt;

import org.openide.util.Exceptions;
import org.unesco.jisis.jisiscore.common.FDTModelEx;
import java.awt.Rectangle;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

import org.unesco.jisis.gui.GuiUtils;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.NbBundle;
import org.unesco.jisis.corelib.common.FieldDefinitionTable;
import org.unesco.jisis.corelib.common.Global;
import org.unesco.jisis.corelib.common.IDatabase;
import org.unesco.jisis.corelib.exceptions.DbException;
import org.unesco.jisis.jisiscore.client.ClientDatabaseProxy;

/**
 * FDT Editor Panel -
 *
 * A readonly JTable visualizes the FDT fields, each row represents a field.
 * The currently JTable selected row is displayed at the top for editing
 *
 * @author jc_dauphin
 */

class ObservableEx extends Observable {
   // The setChanged() protected method must be overridden to make it public

   @Override
   public synchronized void setChanged() {
      super.setChanged();
   }
}

public final class FDTVisualPanel extends JPanel implements ListSelectionListener {

   private FDTModelEx fdtModel_ = null;
   private boolean fdtChanged_ = false;
   private ObservableEx fdtVisualPanelObservers_ = 
           new ObservableEx() { };

   static FDTVisualPanel createEmptyFDTVisualPanel() {
      return new FDTVisualPanel();
   }

   static FDTVisualPanel createFDTVisualPanel(IDatabase db) {
       return new FDTVisualPanel(db);
   }

   /**
    * Constructor to create an empty visual FDT
    */
   public FDTVisualPanel() {

      fdtModel_ = new FDTModelEx();
      initComponents();
      tblFDT.getSelectionModel().addListSelectionListener(this);
      createTableColumns();
      GuiUtils.TweakJTable(tblFDT);
      setFdtChanged(false);
   }

   /**
    * Constructor to create a visual FDT from the fdt associated with the db
    * @param db
    */
   public FDTVisualPanel(IDatabase db) {
      try {
         /** Build the model from the fdt provided by the server */
         fdtModel_ = new FDTModelEx(db.getFieldDefinitionTable());
      } catch (DbException ex) {
         Exceptions.printStackTrace(ex);
      }
      initComponents();

      createTableColumns();
      GuiUtils.TweakJTable(tblFDT);
      
      tblFDT.getSelectionModel().addListSelectionListener(this);
       if (tblFDT.getRowCount() > 0) {
         tblFDT.setRowSelectionInterval(0, 0);
      }
      setFdtChanged(false);
      ClientDatabaseProxy dbProxy =(ClientDatabaseProxy) db;
       if (dbProxy.getDisplayFont() != null) {
            tblFDT.setFont(dbProxy.getDisplayFont());
         }
   }

   private void createTableColumns() {
      tblFDT.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
      for (int i = 0; i < fdtModel_.getColumnCount(); i++) {
         int w = FDTModelEx.fdtColumns[i].width_;
         TableColumn tc = new TableColumn(i, w, null, null);
         tblFDT.addColumn(tc);
      }
   }

   /**
    * Reload visual FDT from the last saved FDT
    * @param db
    */
   public void restore(IDatabase db) {
      try {
         /** Build the model from the fdt provided by the server */
         FieldDefinitionTable fdt = db.getFieldDefinitionTable();
         fdtModel_ = new FDTModelEx(fdt);
      } catch (DbException ex) {
         Exceptions.printStackTrace(ex);
      }
      tblFDT.setModel(fdtModel_);
      fdtModel_.fireTableDataChanged();
      if (tblFDT.getRowCount() > 0) {
         tblFDT.setRowSelectionInterval(0, 0);
      }
      setFdtChanged(false);
      
   }

   @Override
   public String getName() {
      return NbBundle.getMessage(FDTVisualPanel.class, "MSG_DbFdtStep");
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      fdtScrollPane = new javax.swing.JScrollPane();
      tblFDT = new javax.swing.JTable();
      lblTag = new javax.swing.JLabel();
      lblName = new javax.swing.JLabel();
      txtName = new javax.swing.JTextField();
      lblType = new javax.swing.JLabel();
      cmbType = new javax.swing.JComboBox();
      lblRep = new javax.swing.JLabel();
      chkRep = new javax.swing.JCheckBox();
      lblPattern = new javax.swing.JLabel();
      txtPattern = new javax.swing.JTextField();
      btnAddEdit = new javax.swing.JButton();
      spinnerTag = new javax.swing.JSpinner();
      btnDelete = new javax.swing.JButton();
      lblIndicators = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      chkIndicators = new javax.swing.JCheckBox();
      chkFirstSubfield = new javax.swing.JCheckBox();

      tblFDT.setAutoCreateColumnsFromModel(false);
      tblFDT.setModel(fdtModel_);
      fdtScrollPane.setViewportView(tblFDT);

      lblTag.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(lblTag, org.openide.util.NbBundle.getMessage(FDTVisualPanel.class, "LBL_Tag")); // NOI18N

      lblName.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(lblName, org.openide.util.NbBundle.getMessage(FDTVisualPanel.class, "LBL_Name")); // NOI18N

      txtName.setText("field1");

      lblType.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(lblType, org.openide.util.NbBundle.getMessage(FDTVisualPanel.class, "LBL_Type")); // NOI18N

        cmbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALPHANUMERIC", "ALPHABETIC", "NUMERIC", "PATTERN", "DATE", "TIME", "BLOB", "URL", "DOC" }));

      lblRep.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(lblRep, org.openide.util.NbBundle.getMessage(FDTVisualPanel.class, "LBL_Rep")); // NOI18N

      chkRep.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      chkRep.setMargin(new java.awt.Insets(0, 0, 0, 0));

      lblPattern.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(lblPattern, org.openide.util.NbBundle.getMessage(FDTVisualPanel.class, "LBL_Pattern")); // NOI18N

      txtPattern.setText("ab");

      org.openide.awt.Mnemonics.setLocalizedText(btnAddEdit, org.openide.util.NbBundle.getMessage(FDTVisualPanel.class, "BTN_AddUpdate")); // NOI18N
      btnAddEdit.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnAddEditActionPerformed(evt);
         }
      });

      spinnerTag.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
      javax.swing.JSpinner.NumberEditor numberEditor = new javax.swing.JSpinner.NumberEditor(spinnerTag, "");
      numberEditor.getFormat().setGroupingUsed(false);
      spinnerTag.setEditor(numberEditor);
      spinnerTag.setValue(new Integer(1));

      org.openide.awt.Mnemonics.setLocalizedText(btnDelete, org.openide.util.NbBundle.getMessage(FDTVisualPanel.class, "BTN_Delete")); // NOI18N
      btnDelete.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnDeleteActionPerformed(evt);
         }
      });

      lblIndicators.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(lblIndicators, "Indicators");

      jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(jLabel2, "First Subfield");

      chkIndicators.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      chkIndicators.setMargin(new java.awt.Insets(0, 0, 0, 0));

      chkFirstSubfield.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      chkFirstSubfield.setMargin(new java.awt.Insets(0, 0, 0, 0));

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(fdtScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 904, Short.MAX_VALUE)
                  .addContainerGap())
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTag)
                        .addGap(54, 54, 54)
                        .addComponent(lblName))
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(spinnerTag, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(lblType)
                     .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGap(21, 21, 21)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(lblIndicators)
                     .addComponent(chkIndicators))
                  .addGap(18, 18, 18)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(lblRep)
                     .addComponent(chkRep))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel2)
                     .addComponent(chkFirstSubfield))
                  .addGap(34, 34, 34)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(txtPattern, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(lblPattern))
                  .addGap(92, 92, 92))
               .addGroup(layout.createSequentialGroup()
                  .addComponent(btnAddEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(btnDelete)
                  .addContainerGap(754, Short.MAX_VALUE))))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(lblType)
                     .addComponent(lblIndicators)
                     .addComponent(lblRep)
                     .addComponent(jLabel2))
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(lblTag)
                     .addComponent(lblName)))
               .addComponent(lblPattern))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(chkRep)
               .addComponent(chkIndicators)
               .addComponent(chkFirstSubfield)
               .addComponent(txtPattern, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(spinnerTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(btnDelete)
               .addComponent(btnAddEdit))
            .addGap(18, 18, 18)
            .addComponent(fdtScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

       if (tblFDT.getRowCount() <= 0) {
          return;
       }
       String label = NbBundle.getMessage(FDTVisualPanel.class, "MSG_DeleteFieldLabel");
       String title = NbBundle.getMessage(FDTVisualPanel.class, "MSG_DeleteFieldDialogTitle");

       NotifyDescriptor d =
               new NotifyDescriptor.Confirmation(label, title,
               NotifyDescriptor.OK_CANCEL_OPTION);
       if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.OK_OPTION) {
          int selRow = tblFDT.getSelectedRow();
          if (selRow == -1 || tblFDT.getRowCount() <= 0) {
             return;
          }
          fdtModel_.removeRow(selRow);
          /**
           * Note: the call to fireTableDataChanged must be done right after
           * the model is changed and tblFDT.setRowSelectionInterval(row,row)
           * to work.
           */
          fdtModel_.fireTableDataChanged();
          if (tblFDT.getRowCount() > 0) {
             int row = (selRow == 0) ? 0 : selRow - 1;
             tblFDT.setRowSelectionInterval(row, row);
             setEditLine(row);
          }
          setFdtChanged(true);
       }
    }//GEN-LAST:event_btnDeleteActionPerformed

   private void ensureRowIsVisible(int row) {
      Rectangle vis = getVisibleRect();
      Rectangle cellBounds = tblFDT.getCellRect(row, 0, true);
      vis.y = cellBounds.y;
      vis.height = cellBounds.height;
      tblFDT.scrollRectToVisible(vis);
   }


    private void btnAddEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEditActionPerformed
       int tag = Integer.parseInt(spinnerTag.getValue().toString());
       String name = txtName.getText();
       String sType = (String) cmbType.getSelectedItem();
       int type = 0;
       if (sType.equals("ALPHANUMERIC")) {
          type = Global.FIELD_TYPE_ALPHANUMERIC;
       } else if (sType.equals("ALPHABETIC")) {
          type = Global.FIELD_TYPE_ALPHABETIC;
       } else if (sType.equals("NUMERIC")) {
          type = Global.FIELD_TYPE_NUMERIC;
       } else if (sType.equals("PATTERN")) {
          type = Global.FIELD_TYPE_PATTERN;
       } else if (sType.equals("DATE")) {
          type = Global.FIELD_TYPE_DATE;
       } else if (sType.equals("TIME")) {
          type = Global.FIELD_TYPE_TIME;
       } else if (sType.equals("BLOB")) {
          type = Global.FIELD_TYPE_BLOB;
       }else if (sType.equals("URL")) {
          type = Global.FIELD_TYPE_URL;
       }else if (sType.equals("DOC")) {
          type = Global.FIELD_TYPE_DOC;
       }


       boolean indicators = chkIndicators.isSelected();
       boolean repeatable = chkRep.isSelected();
       boolean firstSubfield = chkFirstSubfield.isSelected();
       String pattern = txtPattern.getText();

       fdtModel_.addRow(tag, name, type, indicators,repeatable, firstSubfield, pattern);
       fdtModel_.fireTableDataChanged();
       setFdtChanged(true);
       int i = fdtModel_.findField(tag);
       tblFDT.setRowSelectionInterval(i, i);
       ensureRowIsVisible(i);
    }//GEN-LAST:event_btnAddEditActionPerformed
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnAddEdit;
   private javax.swing.JButton btnDelete;
   private javax.swing.JCheckBox chkFirstSubfield;
   private javax.swing.JCheckBox chkIndicators;
   private javax.swing.JCheckBox chkRep;
   private javax.swing.JComboBox cmbType;
   private javax.swing.JScrollPane fdtScrollPane;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel lblIndicators;
   private javax.swing.JLabel lblName;
   private javax.swing.JLabel lblPattern;
   private javax.swing.JLabel lblRep;
   private javax.swing.JLabel lblTag;
   private javax.swing.JLabel lblType;
   private javax.swing.JSpinner spinnerTag;
   private javax.swing.JTable tblFDT;
   private javax.swing.JTextField txtName;
   private javax.swing.JTextField txtPattern;
   // End of variables declaration//GEN-END:variables

   public FDTModelEx getFDTModel() {
      return (FDTModelEx) tblFDT.getModel();
   }

   /**
    * Called when a new row is selected in the FDT table
    * @param e
    */
   public void valueChanged(ListSelectionEvent e) {
      int selRow = tblFDT.getSelectedRow();
      setEditLine(selRow);
    }

   private void setEditLine(int row) {
      if (row < 0 || row >= tblFDT.getModel().getRowCount()) {
         return;
      }
      TableModel model = tblFDT.getModel();
      spinnerTag.setValue(model.getValueAt(row, 0));
      txtName.setText(model.getValueAt(row, 1).toString());
      int type = (Integer)model.getValueAt(row, 2);
      String s = "";
      switch (type) {
         case Global.FIELD_TYPE_ALPHANUMERIC:
            s = "ALPHANUMERIC";
            break;
         case Global.FIELD_TYPE_ALPHABETIC:
            s = "ALPHABETIC";
            break;
         case Global.FIELD_TYPE_NUMERIC:
            s = "NUMERIC";
            break;
         case Global.FIELD_TYPE_PATTERN:
            s = "PATTERN";
            break;
         case Global.FIELD_TYPE_DATE:
            s = "DATE";
            break;
         case Global.FIELD_TYPE_TIME:
            s = "TIME";
            break;
         case Global.FIELD_TYPE_BLOB:
            s = "BLOB";
            break;
         case Global.FIELD_TYPE_URL:
            s = "URL";
            break;
          case Global.FIELD_TYPE_DOC:
            s = "DOC";
            break;
      }

      cmbType.setSelectedItem(s);
      chkIndicators.setSelected(Boolean.parseBoolean(model.getValueAt(row, 3).toString()));
      chkRep.setSelected(Boolean.parseBoolean(model.getValueAt(row, 4).toString()));
      chkFirstSubfield.setSelected(Boolean.parseBoolean(model.getValueAt(row, 5).toString()));
      txtPattern.setText(model.getValueAt(row, 6).toString());
   }

   public void setFdtChanged(boolean b) {
      fdtChanged_ = b;
      changeNotify();

   }

   public boolean isFdtChanged() {
      return fdtChanged_;
   }

   public void addObserver(Observer newObserver) {
      fdtVisualPanelObservers_.addObserver(newObserver);
   }

   protected void changeNotify() {
      System.out.println("NotifyObservers");
      fdtVisualPanelObservers_.setChanged();
      fdtVisualPanelObservers_.notifyObservers();
   }
}

