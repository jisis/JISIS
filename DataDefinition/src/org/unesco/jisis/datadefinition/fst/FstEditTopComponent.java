package org.unesco.jisis.datadefinition.fst;

import java.awt.BorderLayout;
import java.util.MissingResourceException;
import org.openide.DialogDisplayer;

import org.openide.ErrorManager;
import org.openide.NotifyDescriptor;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.unesco.jisis.corelib.client.ConnectionInfo;
import org.unesco.jisis.corelib.client.ConnectionPool;
import org.unesco.jisis.corelib.common.FieldSelectionTable;
import org.unesco.jisis.corelib.common.IDatabase;
import org.unesco.jisis.corelib.exceptions.DbException;
import org.unesco.jisis.corelib.exceptions.DefaultDBNotFoundException;
import org.unesco.jisis.corelib.exceptions.GeneralDatabaseException;
import org.unesco.jisis.corelib.exceptions.ResourceNotFoundException;
import org.unesco.jisis.jisiscore.client.GuiGlobal;
import org.unesco.jisis.jisiscore.client.ClientDatabaseProxy;


/**
 * Top component which displays something.
 */
final class FstEditTopComponent extends TopComponent {
    
    private static FstEditTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/unesco/jisis/datadefinition/fst/fst.png";
    
    private static final String PREFERRED_ID = "FstEditTopComponent";
    
    private ClientDatabaseProxy db_ = null;
    private FSTVisualPanel fstVisualPanel_ = null;
    
    public FstEditTopComponent(IDatabase db) {
       if ( db instanceof ClientDatabaseProxy) {
          db_ = (ClientDatabaseProxy) db;
       }else {
	  throw new RuntimeException("FstEditTopComponent: Cannot cast DB to ClientDatabaseProxy");
	}
       /* Register this TopComponent as attached to this DB */ 
       db_.addWindow(this);
        initComponents();
        try {
            setName(NbBundle.getMessage(FstEditTopComponent.class, "CTL_FstEditTopComponent")
                    +" ("+db.getDbHome()+"//"+db.getDatabaseName()+")");
        } catch (MissingResourceException ex) {
            new ResourceNotFoundException(ex).displayWarning();
        } catch (DbException ex) {
            new GeneralDatabaseException(ex).displayWarning();
        }
        setToolTipText(NbBundle.getMessage(FstEditTopComponent.class, "HINT_FstEditTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        fstVisualPanel_ = new FSTVisualPanel(db);
        displayPanel.add(fstVisualPanel_, BorderLayout.CENTER);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        ctrlPanel = new javax.swing.JPanel();
        btnClose = new javax.swing.JButton();
        btnRestore = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        displayPanel = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setLayout(new java.awt.BorderLayout());

        ctrlPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ctrlPanel.setPreferredSize(new java.awt.Dimension(100, 40));

        org.openide.awt.Mnemonics.setLocalizedText(btnClose, org.openide.util.NbBundle.getMessage(FstEditTopComponent.class, "BTN_Close")); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnRestore, org.openide.util.NbBundle.getMessage(FstEditTopComponent.class, "BTN_Refresh")); // NOI18N
        btnRestore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestoreActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnSave, org.openide.util.NbBundle.getMessage(FstEditTopComponent.class, "BTN_Save")); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ctrlPanelLayout = new javax.swing.GroupLayout(ctrlPanel);
        ctrlPanel.setLayout(ctrlPanelLayout);
        ctrlPanelLayout.setHorizontalGroup(
            ctrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ctrlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRestore)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose)
                .addContainerGap(415, Short.MAX_VALUE))
        );
        ctrlPanelLayout.setVerticalGroup(
            ctrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ctrlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ctrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose)
                    .addComponent(btnSave)
                    .addComponent(btnRestore))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        displayPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ctrlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ctrlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(mainPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestoreActionPerformed
        fstVisualPanel_.load(db_);
        fstVisualPanel_.setChanged(false);
    }//GEN-LAST:event_btnRestoreActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            FieldSelectionTable fst = fstVisualPanel_.getFSTModel().getFieldSelectionTable();
            db_.saveFieldSelectionTable(fst);
            db_.saveDefaultPrintFormat(fstVisualPanel_.getDefaultFormat());
            fstVisualPanel_.setChanged(false);
            GuiGlobal.output(NbBundle.getMessage(FstEditTopComponent.class, "MSG_FstSuccessfullySaved"));
        } catch (DbException ex) {
            new GeneralDatabaseException(ex).displayWarning();
        }
    }//GEN-LAST:event_btnSaveActionPerformed
    
    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        close();
    }//GEN-LAST:event_btnCloseActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnRestore;
    private javax.swing.JButton btnSave;
    private javax.swing.JPanel ctrlPanel;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized FstEditTopComponent getDefault() throws DefaultDBNotFoundException {
        
        if (instance != null) {
            instance.close();
            instance = null;
        }
        ConnectionInfo connectionInfo = ConnectionPool.getDefaultConnectionInfo();
        if (connectionInfo.getDefaultDatabase() != null) {
            instance = new FstEditTopComponent(connectionInfo.getDefaultDatabase());
        }
        
        return instance;
    }
    
    /**
     * Obtain the FstEditTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized FstEditTopComponent findInstance() throws DefaultDBNotFoundException {
        
        TopComponent win = getDefault();
        
        if (win == null) {
            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find FstEdit component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof FstEditTopComponent) {
            return (FstEditTopComponent)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    
   @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }
    
   @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }
    
   @Override
    public void componentClosed() {
        // TODO add custom code on component closing
       db_.deleteWindow(this);
       
    }
    
   @Override
    public void componentDeactivated() {
       
       if  (fstVisualPanel_.hasChanged()) {
          
          String label = NbBundle.getMessage(FstEditTopComponent.class, 
                    "MSG_FstModifiedAndNotSaved");
          String title = NbBundle.getMessage(FstEditTopComponent.class,
                    "MSG_FstModifiedAndNotSavedTitle");
           
            
          NotifyDescriptor.Confirmation cf = null;
      
          cf = new NotifyDescriptor.Confirmation(label, title,
                   NotifyDescriptor.YES_NO_CANCEL_OPTION,
                   NotifyDescriptor.QUESTION_MESSAGE);
     
          DialogDisplayer.getDefault().notify(cf);
          
          if (cf.getValue() == NotifyDescriptor.CANCEL_OPTION) {
             // Do nothing
             return;
          }
          if (cf.getValue() == NotifyDescriptor.YES_OPTION) {
              this.btnSaveActionPerformed(null);
          }
     
       }
       super.componentDeactivated();
       
    }
    
    
    /** replaces this in object stream */
    /*
    public Object writeReplace() {
        return new ResolvableHelper();
    }
     */
   @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }
    /*
    final static class ResolvableHelper implements Serializable {
        private static final long serialVersionUID = 1L;
        public Object readResolve() {
            try {
                return FstEditTopComponent.getDefault();
            } catch (DBNotFoundException ex) {
            NotifyDescriptor d =
                    new NotifyDescriptor.Message("No Default Database selected. Please, select on from Databases Pool window.", NotifyDescriptor.WARNING_MESSAGE);
            DialogDisplayer.getDefault().notify(d);
            return null;
        }
        }
    }
     */
}
