package org.unesco.jisis.windows.connection;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.io.Serializable;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.tree.TreePath;
import org.openide.ErrorManager;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.unesco.jisis.corelib.client.ConnectionInfo;
import org.unesco.jisis.corelib.client.ConnectionPool;
import org.unesco.jisis.corelib.common.IConnection;

/**
 * Top component which displays something.
 */
public final class ConnTopComponent extends TopComponent {

    private static ConnTopComponent instance = null;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/unesco/jisis/windows/connection/network.png";
    static final String DEFAULT_ICON_PATH = "org/unesco/jisis/windows/connection/default.png";
    static final String CLOSE_ICON_PATH = "org/unesco/jisis/windows/connection/close.png";

    private static final String PREFERRED_ID = "ConnTopComponent";
    
    
     private static final Logger LOGGER = LoggerFactory.getLogger(ConnTopComponent.class);

    private ConnTopComponent() {
       //logger_.entering(this.getClass().getName(),"ConnTopComponent Constructor");
        initComponents();
        setName(NbBundle.getMessage(ConnTopComponent.class, "CTL_ConnTopComponent"));
        setToolTipText(NbBundle.getMessage(ConnTopComponent.class, "HINT_ConnTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        
         JMenuItem miCloseConnection = new JMenuItem(NbBundle.getMessage(ConnTopComponent.class, "CTL_CloseConnection"),
                new ImageIcon(ImageUtilities.loadImage(CLOSE_ICON_PATH, true)));
        miCloseConnection.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
               closeSelectedConnection();
              
            }
        });


        JMenuItem miSetDefault = new JMenuItem(NbBundle.getMessage(ConnTopComponent.class, "CTL_SetDefaultConnection"),
                new ImageIcon(ImageUtilities.loadImage(DEFAULT_ICON_PATH, true)));
        miSetDefault.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                setDefault();
            }
        });
        connPopupMenu.add(miSetDefault);
        connPopupMenu.add(miCloseConnection);
        
        

        // default admin connection disabled
//        try {
//            ConnectionPool.addConnection(new Connection("localhost", 1111, "admin", "admin"));
//        } catch (IOException ex) {
//            ex.printStackTrace();
//        } catch (DbException ex) {
//            ex.printStackTrace();
//        }
        connPoolTree.setModel(new ConnectionsModel());
        connPoolTree.setCellRenderer(new ConnTreeCellRenderer());
        LOGGER.debug("ConnTopComponent Constructor");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connPopupMenu = new javax.swing.JPopupMenu();
        connScrollPane = new javax.swing.JScrollPane();
        connPoolTree = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        btnSetDefault = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        connPoolTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                connPoolTreeMouseClicked(evt);
            }
        });
        connScrollPane.setViewportView(connPoolTree);

        add(connScrollPane, java.awt.BorderLayout.CENTER);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setMinimumSize(new java.awt.Dimension(100, 30));
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 30));

        btnSetDefault.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unesco/jisis/windows/connection/default.png"))); // NOI18N
        btnSetDefault.setToolTipText("Make Selected Connection Default");
        btnSetDefault.setContentAreaFilled(false);
        btnSetDefault.setPreferredSize(new java.awt.Dimension(25, 25));
        btnSetDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetDefaultActionPerformed(evt);
            }
        });

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unesco/jisis/windows/connection/refresh.png"))); // NOI18N
        btnRefresh.setToolTipText("Refresh Display");
        btnRefresh.setContentAreaFilled(false);
        btnRefresh.setPreferredSize(new java.awt.Dimension(25, 25));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unesco/jisis/windows/connection/close.png"))); // NOI18N
        btnClose.setToolTipText("Close Selected Connection");
        btnClose.setContentAreaFilled(false);
        btnClose.setPreferredSize(new java.awt.Dimension(25, 25));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSetDefault, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(309, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnSetDefault, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        add(jPanel1, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed

        closeSelectedConnection();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnSetDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetDefaultActionPerformed
        setDefault();
    }//GEN-LAST:event_btnSetDefaultActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        refresh();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void connPoolTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connPoolTreeMouseClicked
         if (evt.getButton() == MouseEvent.BUTTON3) {
            int x = evt.getX();
            int y = evt.getY();
            connPopupMenu.show(connPoolTree, x, y);
        }
    }//GEN-LAST:event_connPoolTreeMouseClicked

    private void setDefault() {
        TreePath node = connPoolTree.getSelectionPath();
        if (node != null) {
            try {
                IConnection conn = (IConnection) node.getLastPathComponent();
                ConnectionPool.setDefaultConnection(conn);
            }catch (ClassCastException cce) {
                //new NoDatabaseSelectedException().displayWarning();
            }
        }
        connPoolTree.setModel(new ConnectionsModel());
        connPoolTree.updateUI();
    }
    
    
    private void closeSelectedConnection() {
        TreePath node = connPoolTree.getSelectionPath();
        if (node != null) {
            try {
                ConnectionInfo connectionInfo  = (ConnectionInfo) node.getLastPathComponent();
                IConnection conn = connectionInfo.getConnection();
                ConnectionPool.closeConnection(conn);
            }catch (ClassCastException cce) {
                cce.printStackTrace();
            }
        }
        connPoolTree.setModel(new ConnectionsModel());
        connPoolTree.updateUI();
    }
    
    public void refresh() {
        connPoolTree.setModel(new ConnectionsModel());
    }
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSetDefault;
    private javax.swing.JTree connPoolTree;
    private javax.swing.JPopupMenu connPopupMenu;
    private javax.swing.JScrollPane connScrollPane;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized ConnTopComponent getDefault() {
        if (instance == null) {
            instance = new ConnTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ConnTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ConnTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find Conn component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ConnTopComponent) {
            return (ConnTopComponent)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

   @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }

   @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

   @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
   @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

   @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {
        private static final long serialVersionUID = 1L;
        public Object readResolve() {
            return ConnTopComponent.getDefault();
        }
    }

}
